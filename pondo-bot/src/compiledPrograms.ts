/*** GENERATED FILE - DO NOT EDIT ***/
/*** This is generated by the copyFiles.js script ***/

export const pondoPrograms = [
  "credits.aleo",
  "multi_token_support_program_v1.aleo",
  "pondo_oracle.aleo",
  "pondo_staked_aleo_token.aleo",
  "pondo_token.aleo",
  "pondo_delegator1.aleo",
  "pondo_delegator2.aleo",
  "pondo_delegator3.aleo",
  "pondo_delegator4.aleo",
  "pondo_delegator5.aleo",
  "pondo_core_protocol.aleo",
  "reference_delegator.aleo"
];

export const pondoDependencyTree: { [key: string]: string[] } = {
  "multi_token_support_program_v1.aleo": [
    "credits.aleo"
  ],
  "pondo_core_protocol.aleo": [
    "credits.aleo",
    "multi_token_support_program_v1.aleo",
    "pondo_oracle.aleo",
    "pondo_staked_aleo_token.aleo",
    "pondo_token.aleo",
    "pondo_delegator1.aleo",
    "pondo_delegator2.aleo",
    "pondo_delegator3.aleo",
    "pondo_delegator4.aleo",
    "pondo_delegator5.aleo"
  ],
  "pondo_oracle.aleo": [
    "credits.aleo"
  ],
  "pondo_staked_aleo_token.aleo": [
    "credits.aleo",
    "multi_token_support_program_v1.aleo"
  ],
  "pondo_token.aleo": [
    "credits.aleo",
    "multi_token_support_program_v1.aleo"
  ],
  "reference_delegator.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator1.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator2.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator3.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator4.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator5.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ]
};

export const pondoProgramToCode: { [key: string]: string } = {
  "multi_token_support_program_v1.aleo": "import credits.aleo;\nprogram multi_token_support_program_v1.aleo;\n\n\nrecord Token:\n    owner as address.private;\n    amount as u128.private;\n    token_id as field.private;\n    external_authorization_required as boolean.private;\n    authorized_until as u32.private;\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\nstruct Balance:\n    token_id as field;\n    account as address;\n    balance as u128;\n    authorized_until as u32;\n\nstruct Allowance:\n    account as address;\n    spender as address;\n    token_id as field;\n\n\nmapping registered_tokens:\n\tkey as field.public;\n\tvalue as TokenMetadata.public;\n\n\nmapping balances:\n\tkey as field.public;\n\tvalue as Balance.public;\n\n\nmapping authorized_balances:\n\tkey as field.public;\n\tvalue as Balance.public;\n\n\nmapping allowances:\n\tkey as field.public;\n\tvalue as u128.public;\n\n\nmapping roles:\n\tkey as field.public;\n\tvalue as u8.public;\n\n\nfunction transfer_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async transfer_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v1.aleo/transfer_public.future;\n\nfinalize transfer_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r0 into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    get authorized_balances[r5] into r6;\n    get registered_tokens[r0] into r7;\n    lte block.height r6.authorized_until into r8;\n    not r7.external_authorization_required into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    sub r6.balance r2 into r11;\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\n    set r12 into authorized_balances[r5];\n    cast r1 r0 into r13 as TokenOwner;\n    hash.bhp256 r13 into r14 as field;\n    get registered_tokens[r0] into r15;\n    ternary r15.external_authorization_required 0u32 4294967295u32 into r16;\n    cast r0 r1 0u128 r16 into r17 as Balance;\n    get.or_use balances[r14] r17 into r18;\n    get.or_use authorized_balances[r14] r17 into r19;\n    ternary r15.external_authorization_required r18.token_id r19.token_id into r20;\n    ternary r15.external_authorization_required r18.account r19.account into r21;\n    ternary r15.external_authorization_required r18.balance r19.balance into r22;\n    ternary r15.external_authorization_required r18.authorized_until r19.authorized_until into r23;\n    cast r20 r21 r22 r23 into r24 as Balance;\n    add r24.balance r2 into r25;\n    cast r0 r1 r25 r24.authorized_until into r26 as Balance;\n    branch.eq r15.external_authorization_required false to end_then_0_0;\n    set r26 into balances[r14];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    set r26 into authorized_balances[r14];\n    position end_otherwise_0_1;\n\n\n\n\nfunction transfer_public_as_signer:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async transfer_public_as_signer r0 r1 r2 self.signer into r3;\n    output r3 as multi_token_support_program_v1.aleo/transfer_public_as_signer.future;\n\nfinalize transfer_public_as_signer:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r0 into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    get authorized_balances[r5] into r6;\n    get registered_tokens[r0] into r7;\n    lte block.height r6.authorized_until into r8;\n    not r7.external_authorization_required into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    sub r6.balance r2 into r11;\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\n    set r12 into authorized_balances[r5];\n    cast r1 r0 into r13 as TokenOwner;\n    hash.bhp256 r13 into r14 as field;\n    get registered_tokens[r0] into r15;\n    ternary r15.external_authorization_required 0u32 4294967295u32 into r16;\n    cast r0 r1 0u128 r16 into r17 as Balance;\n    get.or_use balances[r14] r17 into r18;\n    get.or_use authorized_balances[r14] r17 into r19;\n    ternary r15.external_authorization_required r18.token_id r19.token_id into r20;\n    ternary r15.external_authorization_required r18.account r19.account into r21;\n    ternary r15.external_authorization_required r18.balance r19.balance into r22;\n    ternary r15.external_authorization_required r18.authorized_until r19.authorized_until into r23;\n    cast r20 r21 r22 r23 into r24 as Balance;\n    add r24.balance r2 into r25;\n    cast r0 r1 r25 r24.authorized_until into r26 as Balance;\n    branch.eq r15.external_authorization_required false to end_then_0_2;\n    set r26 into balances[r14];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    set r26 into authorized_balances[r14];\n    position end_otherwise_0_3;\n\n\n\n\nfunction transfer_private:\n    input r0 as address.private;\n    input r1 as u128.private;\n    input r2 as Token.record;\n    sub r2.amount r1 into r3;\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\n    ternary r2.external_authorization_required 0u32 4294967295u32 into r5;\n    cast r0 r1 r2.token_id r2.external_authorization_required r5 into r6 as Token.record;\n    async transfer_private r2.external_authorization_required r2.authorized_until into r7;\n    output r4 as Token.record;\n    output r6 as Token.record;\n    output r7 as multi_token_support_program_v1.aleo/transfer_private.future;\n\nfinalize transfer_private:\n    input r0 as boolean.public;\n    input r1 as u32.public;\n    lte block.height r1 into r2;\n    not r0 into r3;\n    or r2 r3 into r4;\n    assert.eq r4 true;\n\n\n\n\nfunction transfer_private_to_public:\n    input r0 as address.public;\n    input r1 as u128.public;\n    input r2 as Token.record;\n    sub r2.amount r1 into r3;\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\n    async transfer_private_to_public r2.token_id r0 r1 r2.authorized_until r2.external_authorization_required into r5;\n    output r4 as Token.record;\n    output r5 as multi_token_support_program_v1.aleo/transfer_private_to_public.future;\n\nfinalize transfer_private_to_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    input r4 as boolean.public;\n    lte block.height r3 into r5;\n    not r4 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    cast r1 r0 into r8 as TokenOwner;\n    hash.bhp256 r8 into r9 as field;\n    get registered_tokens[r0] into r10;\n    ternary r10.external_authorization_required 0u32 4294967295u32 into r11;\n    cast r0 r1 0u128 r11 into r12 as Balance;\n    get.or_use balances[r9] r12 into r13;\n    get.or_use authorized_balances[r9] r12 into r14;\n    ternary r10.external_authorization_required r13.token_id r14.token_id into r15;\n    ternary r10.external_authorization_required r13.account r14.account into r16;\n    ternary r10.external_authorization_required r13.balance r14.balance into r17;\n    ternary r10.external_authorization_required r13.authorized_until r14.authorized_until into r18;\n    cast r15 r16 r17 r18 into r19 as Balance;\n    add r19.balance r2 into r20;\n    cast r0 r1 r20 r19.authorized_until into r21 as Balance;\n    branch.eq r10.external_authorization_required false to end_then_0_4;\n    set r21 into balances[r9];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    set r21 into authorized_balances[r9];\n    position end_otherwise_0_5;\n\n\n\n\nfunction transfer_public_to_private:\n    input r0 as field.public;\n    input r1 as address.private;\n    input r2 as u128.public;\n    input r3 as boolean.public;\n    ternary r3 0u32 4294967295u32 into r4;\n    cast r1 r2 r0 r3 r4 into r5 as Token.record;\n    async transfer_public_to_private r0 r2 self.caller r3 into r6;\n    output r5 as Token.record;\n    output r6 as multi_token_support_program_v1.aleo/transfer_public_to_private.future;\n\nfinalize transfer_public_to_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    input r3 as boolean.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r4.external_authorization_required r3;\n    cast r2 r0 into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    get authorized_balances[r6] into r7;\n    get registered_tokens[r0] into r8;\n    lte block.height r7.authorized_until into r9;\n    not r8.external_authorization_required into r10;\n    or r9 r10 into r11;\n    assert.eq r11 true;\n    sub r7.balance r1 into r12;\n    cast r0 r2 r12 r7.authorized_until into r13 as Balance;\n    set r13 into authorized_balances[r6];\n\n\n\n\nfunction initialize:\n    async initialize into r0;\n    output r0 as multi_token_support_program_v1.aleo/initialize.future;\n\nfinalize initialize:\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field 1095517519u128 1095517519u128 6u8 1_500_000_000_000_000u128 1_500_000_000_000_000u128 multi_token_support_program_v1.aleo false multi_token_support_program_v1.aleo into r0 as TokenMetadata;\n    set r0 into registered_tokens[3443843282313283355522573239085696902919850365217539366784739393210722344986field];\n\n\n\n\nfunction register_token:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as u128.public;\n    input r3 as u8.public;\n    input r4 as u128.public;\n    input r5 as boolean.public;\n    input r6 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r7;\n    assert.eq r7 true;\n    cast r0 r1 r2 r3 0u128 r4 self.caller r5 r6 into r8 as TokenMetadata;\n    async register_token r8 into r9;\n    output r9 as multi_token_support_program_v1.aleo/register_token.future;\n\nfinalize register_token:\n    input r0 as TokenMetadata.public;\n    contains registered_tokens[r0.token_id] into r1;\n    assert.eq r1 false;\n    set r0 into registered_tokens[r0.token_id];\n\n\n\n\nfunction update_token_management:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    async update_token_management r0 r1 r2 self.caller into r4;\n    output r4 as multi_token_support_program_v1.aleo/update_token_management.future;\n\nfinalize update_token_management:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r3 r4.admin;\n    cast r0 r4.name r4.symbol r4.decimals r4.supply r4.max_supply r1 r4.external_authorization_required r2 into r5 as TokenMetadata;\n    set r5 into registered_tokens[r0];\n\n\n\n\nfunction set_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u8.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    async set_role r0 r1 r2 self.caller into r4;\n    output r4 as multi_token_support_program_v1.aleo/set_role.future;\n\nfinalize set_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u8.public;\n    input r3 as address.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r3 r4.admin;\n    cast r1 r0 into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    set r2 into roles[r6];\n\n\n\n\nfunction remove_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\n    assert.eq r2 true;\n    async remove_role r0 r1 self.caller into r3;\n    output r3 as multi_token_support_program_v1.aleo/remove_role.future;\n\nfinalize remove_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    get registered_tokens[r0] into r3;\n    assert.eq r2 r3.admin;\n    cast r1 r0 into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    remove roles[r5];\n\n\n\n\nfunction mint_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r4;\n    assert.eq r4 true;\n    async mint_public r0 r1 r2 r3 self.caller into r5;\n    output r5 as multi_token_support_program_v1.aleo/mint_public.future;\n\nfinalize mint_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    input r4 as address.public;\n    get registered_tokens[r0] into r5;\n    is.eq r4 r5.admin into r6;\n    not r6 into r7;\n    branch.eq r7 false to end_then_0_6;\n    cast r4 r0 into r8 as TokenOwner;\n    hash.bhp256 r8 into r9 as field;\n    get roles[r9] into r10;\n    is.eq r10 1u8 into r11;\n    is.eq r10 3u8 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    add r5.supply r2 into r14;\n    lte r14 r5.max_supply into r15;\n    assert.eq r15 true;\n    cast r1 r0 into r16 as TokenOwner;\n    hash.bhp256 r16 into r17 as field;\n    cast r0 r1 0u128 r3 into r18 as Balance;\n    get.or_use balances[r17] r18 into r19;\n    get.or_use authorized_balances[r17] r18 into r20;\n    ternary r5.external_authorization_required r19.token_id r20.token_id into r21;\n    ternary r5.external_authorization_required r19.account r20.account into r22;\n    ternary r5.external_authorization_required r19.balance r20.balance into r23;\n    ternary r5.external_authorization_required r19.authorized_until r20.authorized_until into r24;\n    cast r21 r22 r23 r24 into r25 as Balance;\n    add r25.balance r2 into r26;\n    cast r0 r1 r26 r25.authorized_until into r27 as Balance;\n    branch.eq r5.external_authorization_required false to end_then_0_8;\n    set r27 into balances[r17];\n    branch.eq true true to end_otherwise_0_9;\n    position end_then_0_8;\n    set r27 into authorized_balances[r17];\n    position end_otherwise_0_9;\n    cast r0 r5.name r5.symbol r5.decimals r14 r5.max_supply r5.admin r5.external_authorization_required r5.external_authorization_party into r28 as TokenMetadata;\n    set r28 into registered_tokens[r0];\n\n\n\n\nfunction mint_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as boolean.public;\n    input r4 as u32.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r5;\n    assert.eq r5 true;\n    cast r1 r2 r0 r3 r4 into r6 as Token.record;\n    async mint_private r0 r2 r3 r4 self.caller into r7;\n    output r6 as Token.record;\n    output r7 as multi_token_support_program_v1.aleo/mint_private.future;\n\nfinalize mint_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as boolean.public;\n    input r3 as u32.public;\n    input r4 as address.public;\n    get registered_tokens[r0] into r5;\n    is.eq r4 r5.admin into r6;\n    not r6 into r7;\n    branch.eq r7 false to end_then_0_10;\n    cast r4 r0 into r8 as TokenOwner;\n    hash.bhp256 r8 into r9 as field;\n    get roles[r9] into r10;\n    is.eq r10 1u8 into r11;\n    is.eq r10 3u8 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    branch.eq true true to end_otherwise_0_11;\n    position end_then_0_10;\n    position end_otherwise_0_11;\n    add r5.supply r1 into r14;\n    lte r14 r5.max_supply into r15;\n    assert.eq r15 true;\n    assert.eq r5.external_authorization_required r2;\n    is.eq r3 0u32 into r16;\n    not r5.external_authorization_required into r17;\n    or r16 r17 into r18;\n    assert.eq r18 true;\n    cast r0 r5.name r5.symbol r5.decimals r14 r5.max_supply r5.admin r5.external_authorization_required r5.external_authorization_party into r19 as TokenMetadata;\n    set r19 into registered_tokens[r0];\n\n\n\n\nfunction burn_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    cast r1 r0 into r4 as TokenOwner;\n    async burn_public r4 r2 self.caller into r5;\n    output r5 as multi_token_support_program_v1.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    get registered_tokens[r0.token_id] into r3;\n    is.neq r2 r3.admin into r4;\n    branch.eq r4 false to end_then_0_12;\n    cast r2 r0.token_id into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    get roles[r6] into r7;\n    is.eq r7 2u8 into r8;\n    is.eq r7 3u8 into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    branch.eq true true to end_otherwise_0_13;\n    position end_then_0_12;\n    position end_otherwise_0_13;\n    sub r3.supply r1 into r11;\n    cast r3.token_id r3.name r3.symbol r3.decimals r11 r3.max_supply r3.admin r3.external_authorization_required r3.external_authorization_party into r12 as TokenMetadata;\n    set r12 into registered_tokens[r0.token_id];\n    cast r0.token_id r0.account 0u128 0u32 into r13 as Balance;\n    hash.bhp256 r0 into r14 as field;\n    get.or_use authorized_balances[r14] r13 into r15;\n    gt r15.balance 0u128 into r16;\n    branch.eq r16 false to end_then_0_14;\n    gt r15.balance r1 into r17;\n    branch.eq r17 false to end_then_1_16;\n    sub r15.balance r1 into r18;\n    cast r0.token_id r0.account r18 r15.authorized_until into r19 as Balance;\n    set r19 into authorized_balances[r14];\n    branch.eq true true to end_otherwise_1_17;\n    position end_then_1_16;\n    remove authorized_balances[r14];\n    sub r1 r15.balance into r20;\n    get balances[r14] into r21;\n    sub r21.balance r20 into r22;\n    cast r0.token_id r0.account r22 r21.authorized_until into r23 as Balance;\n    set r23 into balances[r14];\n    position end_otherwise_1_17;\n    branch.eq true true to end_otherwise_0_15;\n    position end_then_0_14;\n    get balances[r14] into r24;\n    sub r24.balance r1 into r25;\n    cast r0.token_id r0.account r25 r24.authorized_until into r26 as Balance;\n    set r26 into balances[r14];\n    position end_otherwise_0_15;\n\n\n\n\nfunction burn_private:\n    input r0 as Token.record;\n    input r1 as u128.public;\n    is.neq r0.token_id 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\n    assert.eq r2 true;\n    sub r0.amount r1 into r3;\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r0.authorized_until into r4 as Token.record;\n    async burn_private r0.token_id r1 self.caller into r5;\n    output r4 as Token.record;\n    output r5 as multi_token_support_program_v1.aleo/burn_private.future;\n\nfinalize burn_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    get registered_tokens[r0] into r3;\n    is.eq r2 r3.admin into r4;\n    not r4 into r5;\n    branch.eq r5 false to end_then_0_18;\n    cast r2 r0 into r6 as TokenOwner;\n    hash.bhp256 r6 into r7 as field;\n    get roles[r7] into r8;\n    is.eq r8 2u8 into r9;\n    is.eq r8 3u8 into r10;\n    or r9 r10 into r11;\n    assert.eq r11 true;\n    branch.eq true true to end_otherwise_0_19;\n    position end_then_0_18;\n    position end_otherwise_0_19;\n    sub r3.supply r1 into r12;\n    cast r0 r3.name r3.symbol r3.decimals r12 r3.max_supply r3.admin r3.external_authorization_required r3.external_authorization_party into r13 as TokenMetadata;\n    set r13 into registered_tokens[r0];\n\n\n\n\nfunction prehook_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as u32.public;\n    async prehook_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v1.aleo/prehook_public.future;\n\nfinalize prehook_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as u32.public;\n    input r3 as address.public;\n    get registered_tokens[r0.token_id] into r4;\n    is.eq r3 r4.external_authorization_party into r5;\n    assert.eq r5 true;\n    cast r0.token_id r0.account 0u128 0u32 into r6 as Balance;\n    hash.bhp256 r0 into r7 as field;\n    get.or_use balances[r7] r6 into r8;\n    get.or_use authorized_balances[r7] r6 into r9;\n    lt r9.authorized_until block.height into r10;\n    add r8.balance r9.balance into r11;\n    ternary r10 r11 r8.balance into r12;\n    ternary r10 0u128 r9.balance into r13;\n    sub r12 r1 into r14;\n    add r13 r1 into r15;\n    cast r0.token_id r0.account r15 r2 into r16 as Balance;\n    set r16 into authorized_balances[r7];\n    cast r0.token_id r0.account r14 r8.authorized_until into r17 as Balance;\n    set r17 into balances[r7];\n\n\n\n\nfunction prehook_private:\n    input r0 as Token.record;\n    input r1 as u128.private;\n    input r2 as u32.private;\n    sub r0.amount r1 into r3;\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r0.authorized_until into r4 as Token.record;\n    cast r0.owner r1 r0.token_id r0.external_authorization_required r2 into r5 as Token.record;\n    async prehook_private r0.token_id self.caller into r6;\n    output r4 as Token.record;\n    output r5 as Token.record;\n    output r6 as multi_token_support_program_v1.aleo/prehook_private.future;\n\nfinalize prehook_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    get registered_tokens[r0] into r2;\n    is.eq r1 r2.external_authorization_party into r3;\n    assert.eq r3 true;\n\n\n\n\nfunction approve_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async approve_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v1.aleo/approve_public.future;\n\nfinalize approve_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r0 into r4 as TokenOwner;\n    cast r3 r1 r0 into r5 as Allowance;\n    hash.bhp256 r5 into r6 as field;\n    get.or_use allowances[r6] 0u128 into r7;\n    add r7 r2 into r8;\n    set r8 into allowances[r6];\n\n\n\n\nfunction unapprove_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async unapprove_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v1.aleo/unapprove_public.future;\n\nfinalize unapprove_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r1 r0 into r4 as Allowance;\n    hash.bhp256 r4 into r5 as field;\n    get allowances[r5] into r6;\n    sub r6 r2 into r7;\n    set r7 into allowances[r5];\n\n\n\n\nfunction transfer_from_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as u128.public;\n    async transfer_from_public r0 r1 r2 r3 self.caller into r4;\n    output r4 as multi_token_support_program_v1.aleo/transfer_from_public.future;\n\nfinalize transfer_from_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as u128.public;\n    input r4 as address.public;\n    cast r1 r4 r0 into r5 as Allowance;\n    hash.bhp256 r5 into r6 as field;\n    get allowances[r6] into r7;\n    sub r7 r3 into r8;\n    set r8 into allowances[r6];\n    cast r1 r0 into r9 as TokenOwner;\n    hash.bhp256 r9 into r10 as field;\n    get authorized_balances[r10] into r11;\n    get registered_tokens[r0] into r12;\n    lte block.height r11.authorized_until into r13;\n    not r12.external_authorization_required into r14;\n    or r13 r14 into r15;\n    assert.eq r15 true;\n    sub r11.balance r3 into r16;\n    cast r0 r1 r16 r11.authorized_until into r17 as Balance;\n    set r17 into authorized_balances[r10];\n    cast r2 r0 into r18 as TokenOwner;\n    hash.bhp256 r18 into r19 as field;\n    get registered_tokens[r0] into r20;\n    ternary r20.external_authorization_required 0u32 4294967295u32 into r21;\n    cast r0 r2 0u128 r21 into r22 as Balance;\n    get.or_use balances[r19] r22 into r23;\n    get.or_use authorized_balances[r19] r22 into r24;\n    ternary r20.external_authorization_required r23.token_id r24.token_id into r25;\n    ternary r20.external_authorization_required r23.account r24.account into r26;\n    ternary r20.external_authorization_required r23.balance r24.balance into r27;\n    ternary r20.external_authorization_required r23.authorized_until r24.authorized_until into r28;\n    cast r25 r26 r27 r28 into r29 as Balance;\n    add r29.balance r3 into r30;\n    cast r0 r2 r30 r29.authorized_until into r31 as Balance;\n    branch.eq r20.external_authorization_required false to end_then_0_20;\n    set r31 into balances[r19];\n    branch.eq true true to end_otherwise_0_21;\n    position end_then_0_20;\n    set r31 into authorized_balances[r19];\n    position end_otherwise_0_21;\n\n\n\n\nfunction transfer_from_public_to_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.private;\n    input r3 as u128.public;\n    input r4 as boolean.public;\n    ternary r4 0u32 4294967295u32 into r5;\n    cast r2 r3 r0 r4 r5 into r6 as Token.record;\n    async transfer_from_public_to_private r0 r1 r3 self.caller r4 into r7;\n    output r6 as Token.record;\n    output r7 as multi_token_support_program_v1.aleo/transfer_from_public_to_private.future;\n\nfinalize transfer_from_public_to_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    input r4 as boolean.public;\n    get registered_tokens[r0] into r5;\n    assert.eq r5.external_authorization_required r4;\n    cast r1 r3 r0 into r6 as Allowance;\n    hash.bhp256 r6 into r7 as field;\n    get allowances[r7] into r8;\n    sub r8 r2 into r9;\n    set r9 into allowances[r7];\n    cast r1 r0 into r10 as TokenOwner;\n    hash.bhp256 r10 into r11 as field;\n    get authorized_balances[r11] into r12;\n    get registered_tokens[r0] into r13;\n    lte block.height r12.authorized_until into r14;\n    not r13.external_authorization_required into r15;\n    or r14 r15 into r16;\n    assert.eq r16 true;\n    sub r12.balance r2 into r17;\n    cast r0 r1 r17 r12.authorized_until into r18 as Balance;\n    set r18 into authorized_balances[r11];\n\n\n\n\nfunction deposit_credits_public:\n    input r0 as u64.public;\n    call credits.aleo/transfer_public_as_signer multi_token_support_program_v1.aleo r0 into r1;\n    cast r0 into r2 as u128;\n    async deposit_credits_public r1 r2 self.signer into r3;\n    output r3 as multi_token_support_program_v1.aleo/deposit_credits_public.future;\n\nfinalize deposit_credits_public:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as u128.public;\n    input r2 as address.public;\n    await r0;\n    cast r2 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field r2 0u128 4294967295u32 into r5 as Balance;\n    get.or_use authorized_balances[r4] r5 into r6;\n    add r6.balance r1 into r7;\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field r2 r7 r6.authorized_until into r8 as Balance;\n    set r8 into authorized_balances[r4];\n\n\n\n\nfunction deposit_credits_private:\n    input r0 as credits.aleo/credits.record;\n    input r1 as u64.private;\n    call credits.aleo/transfer_private_to_public r0 multi_token_support_program_v1.aleo r1 into r2 r3;\n    cast r1 into r4 as u128;\n    cast r0.owner r4 3443843282313283355522573239085696902919850365217539366784739393210722344986field false 4294967295u32 into r5 as Token.record;\n    async deposit_credits_private r3 into r6;\n    output r2 as credits.aleo/credits.record;\n    output r5 as Token.record;\n    output r6 as multi_token_support_program_v1.aleo/deposit_credits_private.future;\n\nfinalize deposit_credits_private:\n    input r0 as credits.aleo/transfer_private_to_public.future;\n    await r0;\n\n\n\n\nfunction withdraw_credits_public:\n    input r0 as u64.private;\n    call credits.aleo/transfer_public self.caller r0 into r1;\n    cast r0 into r2 as u128;\n    async withdraw_credits_public r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v1.aleo/withdraw_credits_public.future;\n\nfinalize withdraw_credits_public:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as u128.public;\n    input r2 as address.public;\n    await r0;\n    cast r2 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    get authorized_balances[r4] into r5;\n    sub r5.balance r1 into r6;\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field r2 r6 r5.authorized_until into r7 as Balance;\n    set r7 into authorized_balances[r4];\n\n\n\n\nfunction withdraw_credits_private:\n    input r0 as Token.record;\n    input r1 as u64.private;\n    is.eq r0.token_id 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\n    assert.eq r2 true;\n    call credits.aleo/transfer_public_to_private r0.owner r1 into r3 r4;\n    cast r1 into r5 as u128;\n    sub r0.amount r5 into r6;\n    cast r0.owner r6 r0.token_id r0.external_authorization_required r0.authorized_until into r7 as Token.record;\n    async withdraw_credits_private r4 into r8;\n    output r7 as Token.record;\n    output r3 as credits.aleo/credits.record;\n    output r8 as multi_token_support_program_v1.aleo/withdraw_credits_private.future;\n\nfinalize withdraw_credits_private:\n    input r0 as credits.aleo/transfer_public_to_private.future;\n    await r0;\n\n",
  "pondo_core_protocol.aleo": "import credits.aleo;\nimport multi_token_support_program_v1.aleo;\nimport pondo_oracle.aleo;\nimport pondo_staked_aleo_token.aleo;\nimport pondo_token.aleo;\nimport pondo_delegator1.aleo;\nimport pondo_delegator2.aleo;\nimport pondo_delegator3.aleo;\nimport pondo_delegator4.aleo;\nimport pondo_delegator5.aleo;\nprogram pondo_core_protocol.aleo;\n\nstruct bond_state:\n    validator as address;\n    microcredits as u64;\n\nstruct unbond_state:\n    microcredits as u64;\n    height as u32;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\nstruct validator_datum:\n    delegator as address;\n    validator as address;\n    block_height as u32;\n    bonded_microcredits as u64;\n    microcredits_yield_per_epoch as u128;\n    commission as u8;\n    boost as u128;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\nstruct withdrawal_state:\n    microcredits as u64;\n    claim_block as u32;\n\n\nmapping validator_set:\n\tkey as u8.public;\n\tvalue as [validator_state; 5u32].public;\n\n\nmapping protocol_state:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping balances:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping owed_commission:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping last_rebalance_epoch:\n\tkey as u8.public;\n\tvalue as u32.public;\n\n\nmapping withdrawals:\n\tkey as address.public;\n\tvalue as withdrawal_state.public;\n\n\nmapping withdrawal_batches:\n\tkey as u32.public;\n\tvalue as u64.public;\n\n\nfunction initialize:\n    input r0 as u64.private;\n    gte r0 102u64 into r1;\n    assert.eq r1 true;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocol.aleo r0 into r2;\n    call pondo_staked_aleo_token.aleo/register_token into r3;\n    call pondo_staked_aleo_token.aleo/mint_public r0 self.signer into r4;\n    call pondo_token.aleo/initialize_token into r5;\n    call pondo_delegator1.aleo/initialize into r6;\n    call pondo_delegator2.aleo/initialize into r7;\n    call pondo_delegator3.aleo/initialize into r8;\n    call pondo_delegator4.aleo/initialize into r9;\n    call pondo_delegator5.aleo/initialize into r10;\n    async initialize r2 r3 r4 r5 r6 r7 r8 r9 r10 r0 into r11;\n    output r11 as pondo_core_protocol.aleo/initialize.future;\n\nfinalize initialize:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as pondo_staked_aleo_token.aleo/register_token.future;\n    input r2 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r3 as pondo_token.aleo/initialize_token.future;\n    input r4 as pondo_delegator1.aleo/initialize.future;\n    input r5 as pondo_delegator2.aleo/initialize.future;\n    input r6 as pondo_delegator3.aleo/initialize.future;\n    input r7 as pondo_delegator4.aleo/initialize.future;\n    input r8 as pondo_delegator5.aleo/initialize.future;\n    input r9 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    await r6;\n    await r7;\n    await r8;\n    set r9 into balances[0u8];\n    set 0u64 into balances[1u8];\n    set 0u64 into balances[2u8];\n    set 0u64 into owed_commission[0u8];\n    set 2u8 into protocol_state[0u8];\n    cast  aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r10 as [address; 10u32];\n    get.or_use pondo_oracle.aleo/top_validators[0u8] r10 into r11;\n    cast aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 0u32 0u64 0u128 40u8 0u128 into r12 as validator_datum;\n    get.or_use pondo_oracle.aleo/validator_data[r11[0u32]] r12 into r13;\n    get.or_use pondo_oracle.aleo/validator_data[r11[1u32]] r12 into r14;\n    get.or_use pondo_oracle.aleo/validator_data[r11[2u32]] r12 into r15;\n    get.or_use pondo_oracle.aleo/validator_data[r11[3u32]] r12 into r16;\n    get.or_use pondo_oracle.aleo/validator_data[r11[4u32]] r12 into r17;\n    cast r13.validator r13.commission into r18 as validator_state;\n    cast r14.validator r14.commission into r19 as validator_state;\n    cast r15.validator r15.commission into r20 as validator_state;\n    cast r16.validator r16.commission into r21 as validator_state;\n    cast r17.validator r17.commission into r22 as validator_state;\n    cast  r18 r19 r20 r21 r22 into r23 as [validator_state; 5u32];\n    set r23 into validator_set[1u8];\n    div block.height 120_960u32 into r24;\n    set r24 into last_rebalance_epoch[0u8];\n\n\n\n\nfunction prep_rebalance:\n    call pondo_delegator1.aleo/prep_rebalance into r0;\n    call pondo_delegator2.aleo/prep_rebalance into r1;\n    call pondo_delegator3.aleo/prep_rebalance into r2;\n    call pondo_delegator4.aleo/prep_rebalance into r3;\n    call pondo_delegator5.aleo/prep_rebalance into r4;\n    async prep_rebalance r0 r1 r2 r3 r4 into r5;\n    output r5 as pondo_core_protocol.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    input r0 as pondo_delegator1.aleo/prep_rebalance.future;\n    input r1 as pondo_delegator2.aleo/prep_rebalance.future;\n    input r2 as pondo_delegator3.aleo/prep_rebalance.future;\n    input r3 as pondo_delegator4.aleo/prep_rebalance.future;\n    input r4 as pondo_delegator5.aleo/prep_rebalance.future;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    div block.height 120_960u32 into r5;\n    get last_rebalance_epoch[0u8] into r6;\n    gt r5 r6 into r7;\n    assert.eq r7 true;\n    set r5 into last_rebalance_epoch[0u8];\n    get protocol_state[0u8] into r8;\n    is.eq r8 0u8 into r9;\n    assert.eq r9 true;\n    set 1u8 into protocol_state[0u8];\n    rem block.height 120_960u32 into r10;\n    lt r10 17_280u32 into r11;\n    is.eq r6 4294967295u32 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    cast  aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r14 as [address; 10u32];\n    get.or_use pondo_oracle.aleo/top_validators[0u8] r14 into r15;\n    cast aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 0u32 0u64 0u128 40u8 0u128 into r16 as validator_datum;\n    get.or_use pondo_oracle.aleo/validator_data[r15[0u32]] r16 into r17;\n    get.or_use pondo_oracle.aleo/validator_data[r15[1u32]] r16 into r18;\n    get.or_use pondo_oracle.aleo/validator_data[r15[2u32]] r16 into r19;\n    get.or_use pondo_oracle.aleo/validator_data[r15[3u32]] r16 into r20;\n    get.or_use pondo_oracle.aleo/validator_data[r15[4u32]] r16 into r21;\n    cast r17.validator r17.commission into r22 as validator_state;\n    cast r18.validator r18.commission into r23 as validator_state;\n    cast r19.validator r19.commission into r24 as validator_state;\n    cast r20.validator r20.commission into r25 as validator_state;\n    cast r21.validator r21.commission into r26 as validator_state;\n    cast  r22 r23 r24 r25 r26 into r27 as [validator_state; 5u32];\n    set r27 into validator_set[1u8];\n\n\n\n\n\n\n\n\nfunction deposit_public_as_signer:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as address.public;\n    gte r1 1u64 into r3;\n    assert.eq r3 true;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocol.aleo r0 into r4;\n    call pondo_staked_aleo_token.aleo/mint_public r1 self.signer into r5;\n    async deposit_public_as_signer r4 r5 r0 r1 into r6;\n    output r6 as pondo_core_protocol.aleo/deposit_public_as_signer.future;\n\nfinalize deposit_public_as_signer:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    await r0;\n    await r1;\n    cast pondo_core_protocol.aleo 0u64 into r4 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r4 into r5;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r4 into r6;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r4 into r7;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r4 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r4 into r9;\n    cast 0u64 0u32 into r10 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r10 into r11;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r10 into r12;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r10 into r13;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r10 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r10 into r15;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r16;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r17;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r18;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r20;\n    add r5.microcredits r6.microcredits into r21;\n    add r21 r7.microcredits into r22;\n    add r22 r8.microcredits into r23;\n    add r23 r9.microcredits into r24;\n    add r16 r17 into r25;\n    add r25 r18 into r26;\n    add r26 r19 into r27;\n    add r27 r20 into r28;\n    add r11.microcredits r12.microcredits into r29;\n    add r29 r13.microcredits into r30;\n    add r30 r14.microcredits into r31;\n    add r31 r15.microcredits into r32;\n    get balances[1u8] into r33;\n    cast r24 into r34 as i64;\n    cast r28 into r35 as i64;\n    add r34 r35 into r36;\n    cast r32 into r37 as i64;\n    add r36 r37 into r38;\n    cast r33 into r39 as i64;\n    sub r38 r39 into r40;\n    get balances[0u8] into r41;\n    get owed_commission[0u8] into r42;\n    get multi_token_support_program_v1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r43;\n    cast r42 into r44 as u128;\n    add r43.supply r44 into r45;\n    cast r3 into r46 as u128;\n    sub r45 r46 into r47;\n    cast r41 into r48 as i64;\n    gt r40 r48 into r49;\n    cast r41 into r50 as i64;\n    sub r40 r50 into r51;\n    ternary r49 r51 0i64 into r52;\n    cast r52 into r53 as u128;\n    mul r53 1000u128 into r54;\n    div r54 10_000u128 into r55;\n    cast r55 into r56 as u64;\n    cast r52 into r57 as u64;\n    sub r57 r56 into r58;\n    add r41 r58 into r59;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r60;\n    get balances[2u8] into r61;\n    get protocol_state[0u8] into r62;\n    is.neq r62 2u8 into r63;\n    sub r60 r2 into r64;\n    sub r64 r61 into r65;\n    sub r60 r59 into r66;\n    sub r66 r2 into r67;\n    sub r67 r61 into r68;\n    ternary r63 r65 r68 into r69;\n    cast r59 into r70 as u128;\n    cast r69 into r71 as u128;\n    cast r56 into r72 as u128;\n    add r70 r71 into r73;\n    add r73 r72 into r74;\n    mul r47 r74 into r75;\n    div r75 r73 into r76;\n    sub r76 r47 into r77;\n    cast r77 into r78 as u64;\n    add r42 r78 into r79;\n    set r79 into owed_commission[0u8];\n    cast r78 into r80 as u128;\n    add r47 r80 into r81;\n    add r59 r56 into r82;\n    set r82 into balances[0u8];\n    cast r82 into r83 as u128;\n    cast r69 into r84 as u128;\n    cast r2 into r85 as u128;\n    add r83 r84 into r86;\n    add r86 r85 into r87;\n    mul r81 r87 into r88;\n    div r88 r86 into r89;\n    sub r89 r81 into r90;\n    cast r90 into r91 as u64;\n    gte r91 r3 into r92;\n    assert.eq r92 true;\n\n\n\n\nfunction deposit_public:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as address.public;\n    gte r1 1u64 into r3;\n    assert.eq r3 true;\n    cast r0 into r4 as u128;\n    call multi_token_support_program_v1.aleo/transfer_from_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.caller pondo_core_protocol.aleo r4 into r5;\n    call multi_token_support_program_v1.aleo/withdraw_credits_public r0 into r6;\n    call pondo_staked_aleo_token.aleo/mint_public r1 self.caller into r7;\n    async deposit_public r5 r6 r7 r0 r1 into r8;\n    output r8 as pondo_core_protocol.aleo/deposit_public.future;\n\nfinalize deposit_public:\n    input r0 as multi_token_support_program_v1.aleo/transfer_from_public.future;\n    input r1 as multi_token_support_program_v1.aleo/withdraw_credits_public.future;\n    input r2 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r3 as u64.public;\n    input r4 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    cast pondo_core_protocol.aleo 0u64 into r5 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r5 into r6;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r5 into r7;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r5 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r5 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r5 into r10;\n    cast 0u64 0u32 into r11 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r11 into r12;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r11 into r13;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r11 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r11 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r11 into r16;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r17;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r18;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r21;\n    add r6.microcredits r7.microcredits into r22;\n    add r22 r8.microcredits into r23;\n    add r23 r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r17 r18 into r26;\n    add r26 r19 into r27;\n    add r27 r20 into r28;\n    add r28 r21 into r29;\n    add r12.microcredits r13.microcredits into r30;\n    add r30 r14.microcredits into r31;\n    add r31 r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    get balances[1u8] into r34;\n    cast r25 into r35 as i64;\n    cast r29 into r36 as i64;\n    add r35 r36 into r37;\n    cast r33 into r38 as i64;\n    add r37 r38 into r39;\n    cast r34 into r40 as i64;\n    sub r39 r40 into r41;\n    get balances[0u8] into r42;\n    get owed_commission[0u8] into r43;\n    get multi_token_support_program_v1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r44;\n    cast r43 into r45 as u128;\n    add r44.supply r45 into r46;\n    cast r4 into r47 as u128;\n    sub r46 r47 into r48;\n    cast r42 into r49 as i64;\n    gt r41 r49 into r50;\n    cast r42 into r51 as i64;\n    sub r41 r51 into r52;\n    ternary r50 r52 0i64 into r53;\n    cast r53 into r54 as u128;\n    mul r54 1000u128 into r55;\n    div r55 10_000u128 into r56;\n    cast r56 into r57 as u64;\n    cast r53 into r58 as u64;\n    sub r58 r57 into r59;\n    add r42 r59 into r60;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r61;\n    get balances[2u8] into r62;\n    get protocol_state[0u8] into r63;\n    is.neq r63 2u8 into r64;\n    sub r61 r3 into r65;\n    sub r65 r62 into r66;\n    sub r61 r60 into r67;\n    sub r67 r3 into r68;\n    sub r68 r62 into r69;\n    ternary r64 r66 r69 into r70;\n    cast r60 into r71 as u128;\n    cast r70 into r72 as u128;\n    cast r57 into r73 as u128;\n    add r71 r72 into r74;\n    add r74 r73 into r75;\n    mul r48 r75 into r76;\n    div r76 r74 into r77;\n    sub r77 r48 into r78;\n    cast r78 into r79 as u64;\n    add r43 r79 into r80;\n    set r80 into owed_commission[0u8];\n    cast r79 into r81 as u128;\n    add r48 r81 into r82;\n    add r60 r57 into r83;\n    set r83 into balances[0u8];\n    cast r83 into r84 as u128;\n    cast r70 into r85 as u128;\n    cast r3 into r86 as u128;\n    add r84 r85 into r87;\n    add r87 r86 into r88;\n    mul r82 r88 into r89;\n    div r89 r87 into r90;\n    sub r90 r82 into r91;\n    cast r91 into r92 as u64;\n    gte r92 r4 into r93;\n    assert.eq r93 true;\n\n\n\n\n\n\nfunction distribute_deposits:\n    input r0 as [u64; 5u32].public;\n    call credits.aleo/transfer_public pondo_delegator1.aleo r0[0u32] into r1;\n    call credits.aleo/transfer_public pondo_delegator2.aleo r0[1u32] into r2;\n    call credits.aleo/transfer_public pondo_delegator3.aleo r0[2u32] into r3;\n    call credits.aleo/transfer_public pondo_delegator4.aleo r0[3u32] into r4;\n    call credits.aleo/transfer_public pondo_delegator5.aleo r0[4u32] into r5;\n    async distribute_deposits r1 r2 r3 r4 r5 into r6;\n    output r6 as pondo_core_protocol.aleo/distribute_deposits.future;\n\nfinalize distribute_deposits:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as credits.aleo/transfer_public.future;\n    input r3 as credits.aleo/transfer_public.future;\n    input r4 as credits.aleo/transfer_public.future;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    get balances[0u8] into r5;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r6;\n    get balances[2u8] into r7;\n    sub r6 r7 into r8;\n    cast r5 into r9 as u128;\n    mul r9 250u128 into r10;\n    div r10 10_000u128 into r11;\n    cast 250_000_000_000u64 into r12 as u128;\n    gt r11 r12 into r13;\n    cast r11 into r14 as u64;\n    ternary r13 250_000_000_000u64 r14 into r15;\n    gte r8 r15 into r16;\n    assert.eq r16 true;\n    get pondo_delegator1.aleo/state_mapping[0u8] into r17;\n    get pondo_delegator2.aleo/state_mapping[0u8] into r18;\n    get pondo_delegator3.aleo/state_mapping[0u8] into r19;\n    get pondo_delegator4.aleo/state_mapping[0u8] into r20;\n    get pondo_delegator5.aleo/state_mapping[0u8] into r21;\n    is.eq r17 0u8 into r22;\n    is.eq r17 1u8 into r23;\n    or r22 r23 into r24;\n    assert.eq r24 true;\n    is.eq r18 0u8 into r25;\n    is.eq r18 1u8 into r26;\n    or r25 r26 into r27;\n    assert.eq r27 true;\n    is.eq r19 0u8 into r28;\n    is.eq r19 1u8 into r29;\n    or r28 r29 into r30;\n    assert.eq r30 true;\n    is.eq r20 0u8 into r31;\n    is.eq r20 1u8 into r32;\n    or r31 r32 into r33;\n    assert.eq r33 true;\n    is.eq r21 0u8 into r34;\n    is.eq r21 1u8 into r35;\n    or r34 r35 into r36;\n    assert.eq r36 true;\n\n\n\n\n\n\nfunction instant_withdraw_public:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    call pondo_staked_aleo_token.aleo/burn_public r0 self.caller into r2;\n    call credits.aleo/transfer_public self.caller r1 into r3;\n    async instant_withdraw_public r2 r3 r0 r1 self.caller into r4;\n    output r4 as pondo_core_protocol.aleo/instant_withdraw_public.future;\n\nfinalize instant_withdraw_public:\n    input r0 as pondo_staked_aleo_token.aleo/burn_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    input r4 as address.public;\n    await r0;\n    await r1;\n    get protocol_state[0u8] into r5;\n    is.neq r5 2u8 into r6;\n    assert.eq r6 true;\n    contains withdrawals[r4] into r7;\n    not r7 into r8;\n    assert.eq r8 true;\n    cast pondo_core_protocol.aleo 0u64 into r9 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r9 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r9 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r9 into r12;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r9 into r13;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r9 into r14;\n    cast 0u64 0u32 into r15 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r15 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r15 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r15 into r18;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r15 into r19;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r15 into r20;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r23;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r24;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r25;\n    add r10.microcredits r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r27 r13.microcredits into r28;\n    add r28 r14.microcredits into r29;\n    add r21 r22 into r30;\n    add r30 r23 into r31;\n    add r31 r24 into r32;\n    add r32 r25 into r33;\n    add r16.microcredits r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    add r35 r19.microcredits into r36;\n    add r36 r20.microcredits into r37;\n    get balances[1u8] into r38;\n    cast r29 into r39 as i64;\n    cast r33 into r40 as i64;\n    add r39 r40 into r41;\n    cast r37 into r42 as i64;\n    add r41 r42 into r43;\n    cast r38 into r44 as i64;\n    sub r43 r44 into r45;\n    get balances[0u8] into r46;\n    get owed_commission[0u8] into r47;\n    get multi_token_support_program_v1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r48;\n    cast r47 into r49 as u128;\n    add r48.supply r49 into r50;\n    cast r2 into r51 as u128;\n    add r50 r51 into r52;\n    cast r46 into r53 as i64;\n    gt r45 r53 into r54;\n    cast r46 into r55 as i64;\n    sub r45 r55 into r56;\n    ternary r54 r56 0i64 into r57;\n    cast r57 into r58 as u128;\n    mul r58 1000u128 into r59;\n    div r59 10_000u128 into r60;\n    cast r60 into r61 as u64;\n    cast r57 into r62 as u64;\n    sub r62 r61 into r63;\n    add r46 r63 into r64;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r65;\n    get balances[2u8] into r66;\n    sub r65 r66 into r67;\n    add r67 r3 into r68;\n    cast r64 into r69 as u128;\n    cast r68 into r70 as u128;\n    cast r61 into r71 as u128;\n    add r69 r70 into r72;\n    add r72 r71 into r73;\n    mul r52 r73 into r74;\n    div r74 r72 into r75;\n    sub r75 r52 into r76;\n    cast r76 into r77 as u64;\n    add r47 r77 into r78;\n    cast r77 into r79 as u128;\n    add r52 r79 into r80;\n    add r64 r61 into r81;\n    cast r81 into r82 as u128;\n    cast r68 into r83 as u128;\n    add r82 r83 into r84;\n    cast r2 into r85 as u128;\n    mul r85 025u128 into r86;\n    div r86 10_000u128 into r87;\n    cast r87 into r88 as u64;\n    sub r2 r88 into r89;\n    cast r89 into r90 as u128;\n    cast r84 into r91 as u128;\n    mul r90 r91 into r92;\n    cast r80 into r93 as u128;\n    div r92 r93 into r94;\n    cast r94 into r95 as u64;\n    lte r3 r95 into r96;\n    assert.eq r96 true;\n    add r78 r88 into r97;\n    set r97 into owed_commission[0u8];\n\n\n\n\n\n\nfunction withdraw_public:\n    input r0 as u64.public;\n    call pondo_staked_aleo_token.aleo/burn_public r0 self.caller into r1;\n    async withdraw_public r1 r0 self.caller into r2;\n    output r2 as pondo_core_protocol.aleo/withdraw_public.future;\n\nfinalize withdraw_public:\n    input r0 as pondo_staked_aleo_token.aleo/burn_public.future;\n    input r1 as u64.public;\n    input r2 as address.public;\n    await r0;\n    contains withdrawals[r2] into r3;\n    not r3 into r4;\n    assert.eq r4 true;\n    cast pondo_core_protocol.aleo 0u64 into r5 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r5 into r6;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r5 into r7;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r5 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r5 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r5 into r10;\n    cast 0u64 0u32 into r11 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r11 into r12;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r11 into r13;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r11 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r11 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r11 into r16;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r17;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r18;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r21;\n    add r6.microcredits r7.microcredits into r22;\n    add r22 r8.microcredits into r23;\n    add r23 r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r17 r18 into r26;\n    add r26 r19 into r27;\n    add r27 r20 into r28;\n    add r28 r21 into r29;\n    add r12.microcredits r13.microcredits into r30;\n    add r30 r14.microcredits into r31;\n    add r31 r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    get balances[1u8] into r34;\n    cast r25 into r35 as i64;\n    cast r29 into r36 as i64;\n    add r35 r36 into r37;\n    cast r33 into r38 as i64;\n    add r37 r38 into r39;\n    cast r34 into r40 as i64;\n    sub r39 r40 into r41;\n    get balances[0u8] into r42;\n    get owed_commission[0u8] into r43;\n    get multi_token_support_program_v1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r44;\n    cast r43 into r45 as u128;\n    add r44.supply r45 into r46;\n    cast r1 into r47 as u128;\n    add r46 r47 into r48;\n    cast r42 into r49 as i64;\n    gt r41 r49 into r50;\n    cast r42 into r51 as i64;\n    sub r41 r51 into r52;\n    ternary r50 r52 0i64 into r53;\n    cast r53 into r54 as u128;\n    mul r54 1000u128 into r55;\n    div r55 10_000u128 into r56;\n    cast r56 into r57 as u64;\n    cast r53 into r58 as u64;\n    sub r58 r57 into r59;\n    add r42 r59 into r60;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r61;\n    get balances[2u8] into r62;\n    get protocol_state[0u8] into r63;\n    is.neq r63 2u8 into r64;\n    sub r61 r62 into r65;\n    sub r61 r60 into r66;\n    sub r66 r62 into r67;\n    ternary r64 r65 r67 into r68;\n    cast r60 into r69 as u128;\n    cast r68 into r70 as u128;\n    cast r57 into r71 as u128;\n    add r69 r70 into r72;\n    add r72 r71 into r73;\n    mul r48 r73 into r74;\n    div r74 r72 into r75;\n    sub r75 r48 into r76;\n    cast r76 into r77 as u64;\n    add r43 r77 into r78;\n    set r78 into owed_commission[0u8];\n    cast r77 into r79 as u128;\n    add r48 r79 into r80;\n    add r60 r57 into r81;\n    cast r81 into r82 as u128;\n    cast r68 into r83 as u128;\n    add r82 r83 into r84;\n    cast r1 into r85 as u128;\n    cast r84 into r86 as u128;\n    mul r85 r86 into r87;\n    cast r80 into r88 as u128;\n    div r87 r88 into r89;\n    cast r89 into r90 as u64;\n    add r34 r90 into r91;\n    set r91 into balances[1u8];\n    sub r81 r90 into r92;\n    set r92 into balances[0u8];\n    add block.height 43_200u32 into r93;\n    div r93 120_960u32 into r94;\n    add r94 1u32 into r95;\n    mul r95 120_960u32 into r96;\n    add r96 17_280u32 into r97;\n    add r97 1u32 into r98;\n    cast r90 r98 into r99 as withdrawal_state;\n    set r99 into withdrawals[r2];\n    get.or_use withdrawal_batches[r94] 0u64 into r100;\n    add r100 r90 into r101;\n    set r101 into withdrawal_batches[r94];\n\n\n\n\nfunction claim_withdrawal_public:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/transfer_public r0 r1 into r2;\n    async claim_withdrawal_public r2 r0 r1 into r3;\n    output r3 as pondo_core_protocol.aleo/claim_withdrawal_public.future;\n\nfinalize claim_withdrawal_public:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as address.public;\n    input r2 as u64.public;\n    await r0;\n    get withdrawals[r1] into r3;\n    lt r3.claim_block block.height into r4;\n    assert.eq r4 true;\n    is.eq r3.microcredits r2 into r5;\n    branch.eq r5 false to end_then_0_0;\n    remove withdrawals[r1];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    sub r3.microcredits r2 into r6;\n    cast r6 r3.claim_block into r7 as withdrawal_state;\n    set r7 into withdrawals[r1];\n    position end_otherwise_0_1;\n    get balances[2u8] into r8;\n    sub r8 r2 into r9;\n    set r9 into balances[2u8];\n\n\n\n\nfunction rebalance_retrieve_credits:\n    input r0 as [u64; 5u32].public;\n    input r1 as u64.public;\n    call pondo_delegator1.aleo/transfer_to_core_protocol r0[0u32] into r2;\n    call pondo_delegator2.aleo/transfer_to_core_protocol r0[1u32] into r3;\n    call pondo_delegator3.aleo/transfer_to_core_protocol r0[2u32] into r4;\n    call pondo_delegator4.aleo/transfer_to_core_protocol r0[3u32] into r5;\n    call pondo_delegator5.aleo/transfer_to_core_protocol r0[4u32] into r6;\n    call pondo_staked_aleo_token.aleo/mint_public r1 pondo_token.aleo into r7;\n    async rebalance_retrieve_credits r2 r3 r4 r5 r6 r7 r0 r1 into r8;\n    output r8 as pondo_core_protocol.aleo/rebalance_retrieve_credits.future;\n\nfinalize rebalance_retrieve_credits:\n    input r0 as pondo_delegator1.aleo/transfer_to_core_protocol.future;\n    input r1 as pondo_delegator2.aleo/transfer_to_core_protocol.future;\n    input r2 as pondo_delegator3.aleo/transfer_to_core_protocol.future;\n    input r3 as pondo_delegator4.aleo/transfer_to_core_protocol.future;\n    input r4 as pondo_delegator5.aleo/transfer_to_core_protocol.future;\n    input r5 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r6 as [u64; 5u32].public;\n    input r7 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    add r6[0u32] r6[1u32] into r8;\n    add r8 r6[2u32] into r9;\n    add r9 r6[3u32] into r10;\n    add r10 r6[4u32] into r11;\n    get balances[0u8] into r12;\n    get owed_commission[0u8] into r13;\n    get multi_token_support_program_v1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r14;\n    cast r13 into r15 as u128;\n    add r14.supply r15 into r16;\n    cast r7 into r17 as u128;\n    sub r16 r17 into r18;\n    gt r11 r12 into r19;\n    cast r11 into r20 as i64;\n    cast r12 into r21 as i64;\n    sub r20 r21 into r22;\n    ternary r19 r22 0i64 into r23;\n    cast r23 into r24 as u128;\n    mul r24 1000u128 into r25;\n    div r25 10_000u128 into r26;\n    cast r26 into r27 as u64;\n    cast r23 into r28 as u64;\n    sub r28 r27 into r29;\n    add r12 r29 into r30;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r31;\n    get balances[2u8] into r32;\n    sub r31 r11 into r33;\n    sub r33 r32 into r34;\n    cast r30 into r35 as u128;\n    cast r34 into r36 as u128;\n    cast r27 into r37 as u128;\n    add r35 r36 into r38;\n    add r38 r37 into r39;\n    mul r18 r39 into r40;\n    div r40 r38 into r41;\n    sub r41 r18 into r42;\n    cast r42 into r43 as u64;\n    add r13 r43 into r44;\n    sub r44 r7 into r45;\n    set r45 into owed_commission[0u8];\n    add r30 r27 into r46;\n    set r46 into balances[0u8];\n    div block.height 120_960u32 into r47;\n    sub r47 1u32 into r48;\n    get.or_use withdrawal_batches[r48] 0u64 into r49;\n    add r32 r49 into r50;\n    set r50 into balances[2u8];\n    get balances[1u8] into r51;\n    sub r51 r49 into r52;\n    set r52 into balances[1u8];\n    get protocol_state[0u8] into r53;\n    is.eq r53 1u8 into r54;\n    assert.eq r54 true;\n    set 2u8 into protocol_state[0u8];\n\n\n\n\nfunction rebalance_redistribute:\n    input r0 as [validator_state; 5u32].public;\n    input r1 as [u64; 5u32].public;\n    call credits.aleo/transfer_public pondo_delegator1.aleo r1[0u32] into r2;\n    call credits.aleo/transfer_public pondo_delegator2.aleo r1[1u32] into r3;\n    call credits.aleo/transfer_public pondo_delegator3.aleo r1[2u32] into r4;\n    call credits.aleo/transfer_public pondo_delegator4.aleo r1[3u32] into r5;\n    call credits.aleo/transfer_public pondo_delegator5.aleo r1[4u32] into r6;\n    call pondo_delegator1.aleo/set_validator r0[0u32].validator r0[0u32].commission into r7;\n    call pondo_delegator2.aleo/set_validator r0[1u32].validator r0[1u32].commission into r8;\n    call pondo_delegator3.aleo/set_validator r0[2u32].validator r0[2u32].commission into r9;\n    call pondo_delegator4.aleo/set_validator r0[3u32].validator r0[3u32].commission into r10;\n    call pondo_delegator5.aleo/set_validator r0[4u32].validator r0[4u32].commission into r11;\n    async rebalance_redistribute r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r0 r1 into r12;\n    output r12 as pondo_core_protocol.aleo/rebalance_redistribute.future;\n\nfinalize rebalance_redistribute:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as credits.aleo/transfer_public.future;\n    input r3 as credits.aleo/transfer_public.future;\n    input r4 as credits.aleo/transfer_public.future;\n    input r5 as pondo_delegator1.aleo/set_validator.future;\n    input r6 as pondo_delegator2.aleo/set_validator.future;\n    input r7 as pondo_delegator3.aleo/set_validator.future;\n    input r8 as pondo_delegator4.aleo/set_validator.future;\n    input r9 as pondo_delegator5.aleo/set_validator.future;\n    input r10 as [validator_state; 5u32].public;\n    input r11 as [u64; 5u32].public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    await r6;\n    await r7;\n    await r8;\n    await r9;\n    get validator_set[1u8] into r12;\n    set r12 into validator_set[0u8];\n    remove validator_set[1u8];\n    is.eq r10[0u32].validator r12[0u32].validator into r13;\n    is.eq r10[0u32].commission r12[0u32].commission into r14;\n    and r13 r14 into r15;\n    assert.eq r15 true;\n    is.eq r10[1u32].validator r12[1u32].validator into r16;\n    is.eq r10[1u32].commission r12[1u32].commission into r17;\n    and r16 r17 into r18;\n    assert.eq r18 true;\n    is.eq r10[2u32].validator r12[2u32].validator into r19;\n    is.eq r10[2u32].commission r12[2u32].commission into r20;\n    and r19 r20 into r21;\n    assert.eq r21 true;\n    is.eq r10[3u32].validator r12[3u32].validator into r22;\n    is.eq r10[3u32].commission r12[3u32].commission into r23;\n    and r22 r23 into r24;\n    assert.eq r24 true;\n    is.eq r10[4u32].validator r12[4u32].validator into r25;\n    is.eq r10[4u32].commission r12[4u32].commission into r26;\n    and r25 r26 into r27;\n    assert.eq r27 true;\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r28 as [u128; 10u32];\n    get.or_use pondo_oracle.aleo/delegator_allocation[0u8] r28 into r29;\n    add r11[0u32] r11[1u32] into r30;\n    add r30 r11[2u32] into r31;\n    add r31 r11[3u32] into r32;\n    add r32 r11[4u32] into r33;\n    cast r33 into r34 as u128;\n    cast r11[0u32] into r35 as u128;\n    mul r35 10_000u128 into r36;\n    div r36 r34 into r37;\n    cast r11[1u32] into r38 as u128;\n    mul r38 10_000u128 into r39;\n    div r39 r34 into r40;\n    cast r11[2u32] into r41 as u128;\n    mul r41 10_000u128 into r42;\n    div r42 r34 into r43;\n    cast r11[3u32] into r44 as u128;\n    mul r44 10_000u128 into r45;\n    div r45 r34 into r46;\n    cast r11[4u32] into r47 as u128;\n    mul r47 10_000u128 into r48;\n    div r48 r34 into r49;\n    sub r29[0u32] r37 into r50;\n    lte r50 2u128 into r51;\n    assert.eq r51 true;\n    sub r29[1u32] r40 into r52;\n    lte r52 2u128 into r53;\n    assert.eq r53 true;\n    sub r29[2u32] r43 into r54;\n    lte r54 2u128 into r55;\n    assert.eq r55 true;\n    sub r29[3u32] r46 into r56;\n    lte r56 2u128 into r57;\n    assert.eq r57 true;\n    sub r29[4u32] r49 into r58;\n    lte r58 2u128 into r59;\n    assert.eq r59 true;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r60;\n    get balances[2u8] into r61;\n    sub r60 r61 into r62;\n    mul r34 250u128 into r63;\n    div r63 10_000u128 into r64;\n    cast 250_000_000_000u64 into r65 as u128;\n    gt r64 r65 into r66;\n    cast r64 into r67 as u64;\n    ternary r66 250_000_000_000u64 r67 into r68;\n    gte r62 r68 into r69;\n    assert.eq r69 true;\n    add r68 250u64 into r70;\n    lte r62 r70 into r71;\n    assert.eq r71 true;\n    set r33 into balances[0u8];\n    get protocol_state[0u8] into r72;\n    is.eq r72 2u8 into r73;\n    assert.eq r73 true;\n    set 0u8 into protocol_state[0u8];\n\n\n\n\nfunction set_oracle_tvl:\n    input r0 as u64.public;\n    call pondo_oracle.aleo/set_pondo_tvl r0 into r1;\n    async set_oracle_tvl r1 r0 into r2;\n    output r2 as pondo_core_protocol.aleo/set_oracle_tvl.future;\n\nfinalize set_oracle_tvl:\n    input r0 as pondo_oracle.aleo/set_pondo_tvl.future;\n    input r1 as u64.public;\n    await r0;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r2;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r3;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r4;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r5;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r6;\n    cast pondo_core_protocol.aleo 0u64 into r7 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r7 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r7 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r7 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r7 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r7 into r12;\n    cast 0u64 0u32 into r13 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r13 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r13 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r13 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r13 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r13 into r18;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r19;\n    add r2 r3 into r20;\n    add r20 r4 into r21;\n    add r21 r5 into r22;\n    add r22 r6 into r23;\n    add r23 r8.microcredits into r24;\n    add r24 r9.microcredits into r25;\n    add r25 r10.microcredits into r26;\n    add r26 r11.microcredits into r27;\n    add r27 r12.microcredits into r28;\n    add r28 r19 into r29;\n    add r29 r14.microcredits into r30;\n    add r30 r15.microcredits into r31;\n    add r31 r16.microcredits into r32;\n    add r32 r17.microcredits into r33;\n    add r33 r18.microcredits into r34;\n    mul r1 98u64 into r35;\n    div r35 100u64 into r36;\n    gte r34 r36 into r37;\n    mul r1 102u64 into r38;\n    div r38 100u64 into r39;\n    lte r34 r39 into r40;\n    and r37 r40 into r41;\n    assert.eq r41 true;\n\n",
  "pondo_oracle.aleo": "import credits.aleo;\nprogram pondo_oracle.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\nstruct bond_state:\n    validator as address;\n    microcredits as u64;\n\n\nstruct validator_datum:\n    delegator as address;\n    validator as address;\n    block_height as u32;\n    bonded_microcredits as u64;\n    microcredits_yield_per_epoch as u128;\n    commission as u8;\n    boost as u128;\n\nstruct validator_boost:\n    epoch as u32;\n    boost_amount as u64;\n\n\nmapping delegator_to_validator:\n\tkey as address.public;\n\tvalue as address.public;\n\n\nmapping validator_data:\n\tkey as address.public;\n\tvalue as validator_datum.public;\n\n\nmapping top_validators:\n\tkey as u8.public;\n\tvalue as [address; 10u32].public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nmapping pondo_tvl:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping validator_boosting:\n\tkey as address.public;\n\tvalue as validator_boost.public;\n\n\nmapping control_addresses:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nmapping delegator_allocation:\n\tkey as u8.public;\n\tvalue as [u128; 10u32].public;\n\n\nfunction initialize:\n    async initialize into r0;\n    output r0 as pondo_oracle.aleo/initialize.future;\n\nfinalize initialize:\n    set true into control_addresses[aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0];\n    set false into control_addresses[pondo_delegator1.aleo];\n    set false into control_addresses[pondo_delegator2.aleo];\n    set false into control_addresses[pondo_delegator3.aleo];\n    set false into control_addresses[pondo_delegator4.aleo];\n    set false into control_addresses[pondo_delegator5.aleo];\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r0 as [u128; 10u32];\n    set r0 into delegator_allocation[0u8];\n    cast  aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r1 as [address; 10u32];\n    set r1 into top_validators[0u8];\n\n\n\n\nfunction add_control_address:\n    input r0 as address.public;\n    async add_control_address r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/add_control_address.future;\n\nfinalize add_control_address:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set false into control_addresses[r0];\n\n\n\n\nfunction remove_control_address:\n    input r0 as address.public;\n    async remove_control_address r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/remove_control_address.future;\n\nfinalize remove_control_address:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    remove control_addresses[r0];\n\n\n\n\nfunction update_admin:\n    input r0 as address.public;\n    async update_admin r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/update_admin.future;\n\nfinalize update_admin:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set true into control_addresses[r0];\n    remove control_addresses[r1];\n\n\n\n\nfunction update_delegator_allocations:\n    input r0 as [u128; 10u32].public;\n    async update_delegator_allocations r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/update_delegator_allocations.future;\n\nfinalize update_delegator_allocations:\n    input r0 as [u128; 10u32].public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set r0 into delegator_allocation[0u8];\n\n\n\n\nfunction propose_delegator:\n    input r0 as address.public;\n    assert.neq self.caller self.signer;\n    async propose_delegator self.caller r0 into r1;\n    output r1 as pondo_oracle.aleo/propose_delegator.future;\n\nfinalize propose_delegator:\n    input r0 as address.public;\n    input r1 as address.public;\n    contains banned_validators[r1] into r2;\n    assert.eq r2 false;\n    contains delegator_to_validator[r0] into r3;\n    assert.eq r3 false;\n    set r1 into delegator_to_validator[r0];\n\n\n\n\nfunction add_delegator:\n    input r0 as address.public;\n    async add_delegator r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/add_delegator.future;\n\nfinalize add_delegator:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    contains delegator_to_validator[r0] into r3;\n    assert.eq r3 true;\n    get credits.aleo/withdraw[r0] into r4;\n    assert.eq r4 r0;\n    get delegator_to_validator[r0] into r5;\n    get credits.aleo/bonded[r0] into r6;\n    assert.eq r6.validator r5;\n    contains banned_validators[r5] into r7;\n    assert.eq r7 false;\n    contains validator_data[r0] into r8;\n    assert.eq r8 false;\n    get credits.aleo/committee[r5] into r9;\n    assert.eq r9.is_open true;\n    lt r9.commission 50u8 into r10;\n    assert.eq r10 true;\n    cast r0 r5 block.height r6.microcredits 0u128 r9.commission 0u128 into r11 as validator_datum;\n    set r11 into validator_data[r0];\n\n\n\n\n\n\nfunction update_data:\n    input r0 as address.public;\n    async update_data r0 into r1;\n    output r1 as pondo_oracle.aleo/update_data.future;\n\nfinalize update_data:\n    input r0 as address.public;\n    get validator_data[r0] into r1;\n    contains banned_validators[r1.validator] into r2;\n    assert.eq r2 false;\n    rem block.height 120_960u32 into r3;\n    gte r3 103_680u32 into r4;\n    assert.eq r4 true;\n    sub block.height r1.block_height into r5;\n    gt r5 103_680u32 into r6;\n    assert.eq r6 true;\n    get credits.aleo/committee[r1.validator] into r7;\n    lt r7.commission 50u8 into r8;\n    assert.eq r8 true;\n    assert.eq r7.is_open true;\n    get credits.aleo/bonded[r0] into r9;\n    div block.height 120_960u32 into r10;\n    cast r9.microcredits into r11 as u128;\n    cast r1.bonded_microcredits into r12 as u128;\n    sub r11 r12 into r13;\n    mul r13 10_000_000_000u128 into r14;\n    cast r1.bonded_microcredits into r15 as u128;\n    div r14 r15 into r16;\n    cast 120_960u32 into r17 as u128;\n    mul r16 r17 into r18;\n    cast r5 into r19 as u128;\n    div r18 r19 into r20;\n    cast 0u32 0u64 into r21 as validator_boost;\n    get.or_use validator_boosting[r1.validator] r21 into r22;\n    is.eq r22.epoch r10 into r23;\n    cast r22.boost_amount into r24 as u128;\n    ternary r23 r24 0u128 into r25;\n    get.or_use pondo_tvl[0u8] 10_000_000_000_000_000u64 into r26;\n    cast r26 into r27 as u128;\n    mul r25 10_000_000_000u128 into r28;\n    cast r27 into r29 as u128;\n    div r28 r29 into r30;\n    div r1.block_height 120_960u32 into r31;\n    add r31 1u32 into r32;\n    is.eq r32 r10 into r33;\n    add r20 r30 into r34;\n    ternary r33 r34 0u128 into r35;\n    cast r0 r1.validator block.height r9.microcredits r35 r7.commission r25 into r36 as validator_datum;\n    set r36 into validator_data[r0];\n    get top_validators[0u8] into r37;\n    cast aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc 0u32 0u64 0u128 0u8 0u128 into r38 as validator_datum;\n    get.or_use validator_data[r37[0u32]] r38 into r39;\n    get.or_use validator_data[r37[1u32]] r38 into r40;\n    get.or_use validator_data[r37[2u32]] r38 into r41;\n    get.or_use validator_data[r37[3u32]] r38 into r42;\n    get.or_use validator_data[r37[4u32]] r38 into r43;\n    get.or_use validator_data[r37[5u32]] r38 into r44;\n    get.or_use validator_data[r37[6u32]] r38 into r45;\n    get.or_use validator_data[r37[7u32]] r38 into r46;\n    get.or_use validator_data[r37[8u32]] r38 into r47;\n    get.or_use validator_data[r37[9u32]] r38 into r48;\n    mul r10 120_960u32 into r49;\n    get delegator_allocation[0u8] into r50;\n    is.eq r36.delegator r39.delegator into r51;\n    is.eq r36.validator r39.validator into r52;\n    lt r39.block_height r49 into r53;\n    lt r36.block_height r49 into r54;\n    is.eq r39.microcredits_yield_per_epoch 0u128 into r55;\n    is.eq r36.microcredits_yield_per_epoch 0u128 into r56;\n    mul r36.boost 10_000u128 into r57;\n    div r57 r50[0u32] into r58;\n    add r36.microcredits_yield_per_epoch r58 into r59;\n    mul r39.boost 10_000u128 into r60;\n    div r60 r50[0u32] into r61;\n    add r39.microcredits_yield_per_epoch r61 into r62;\n    gt r59 r62 into r63;\n    lt r59 r62 into r64;\n    ternary r52 r63 r64 into r65;\n    ternary r65 r39.delegator r36.delegator into r66;\n    ternary r65 r39.validator r36.validator into r67;\n    ternary r65 r39.block_height r36.block_height into r68;\n    ternary r65 r39.bonded_microcredits r36.bonded_microcredits into r69;\n    ternary r65 r39.microcredits_yield_per_epoch r36.microcredits_yield_per_epoch into r70;\n    ternary r65 r39.commission r36.commission into r71;\n    ternary r65 r39.boost r36.boost into r72;\n    cast r66 r67 r68 r69 r70 r71 r72 into r73 as validator_datum;\n    ternary r65 r36.delegator r39.delegator into r74;\n    ternary r65 r36.validator r39.validator into r75;\n    ternary r65 r36.block_height r39.block_height into r76;\n    ternary r65 r36.bonded_microcredits r39.bonded_microcredits into r77;\n    ternary r65 r36.microcredits_yield_per_epoch r39.microcredits_yield_per_epoch into r78;\n    ternary r65 r36.commission r39.commission into r79;\n    ternary r65 r36.boost r39.boost into r80;\n    cast r74 r75 r76 r77 r78 r79 r80 into r81 as validator_datum;\n    ternary r65 r52 r52 into r82;\n    ternary r56 r39.delegator r73.delegator into r83;\n    ternary r56 r39.validator r73.validator into r84;\n    ternary r56 r39.block_height r73.block_height into r85;\n    ternary r56 r39.bonded_microcredits r73.bonded_microcredits into r86;\n    ternary r56 r39.microcredits_yield_per_epoch r73.microcredits_yield_per_epoch into r87;\n    ternary r56 r39.commission r73.commission into r88;\n    ternary r56 r39.boost r73.boost into r89;\n    cast r83 r84 r85 r86 r87 r88 r89 into r90 as validator_datum;\n    ternary r56 r36.delegator r81.delegator into r91;\n    ternary r56 r36.validator r81.validator into r92;\n    ternary r56 r36.block_height r81.block_height into r93;\n    ternary r56 r36.bonded_microcredits r81.bonded_microcredits into r94;\n    ternary r56 r36.microcredits_yield_per_epoch r81.microcredits_yield_per_epoch into r95;\n    ternary r56 r36.commission r81.commission into r96;\n    ternary r56 r36.boost r81.boost into r97;\n    cast r91 r92 r93 r94 r95 r96 r97 into r98 as validator_datum;\n    ternary r56 r52 r82 into r99;\n    ternary r55 r36.delegator r90.delegator into r100;\n    ternary r55 r36.validator r90.validator into r101;\n    ternary r55 r36.block_height r90.block_height into r102;\n    ternary r55 r36.bonded_microcredits r90.bonded_microcredits into r103;\n    ternary r55 r36.microcredits_yield_per_epoch r90.microcredits_yield_per_epoch into r104;\n    ternary r55 r36.commission r90.commission into r105;\n    ternary r55 r36.boost r90.boost into r106;\n    cast r100 r101 r102 r103 r104 r105 r106 into r107 as validator_datum;\n    ternary r55 r39.delegator r98.delegator into r108;\n    ternary r55 r39.validator r98.validator into r109;\n    ternary r55 r39.block_height r98.block_height into r110;\n    ternary r55 r39.bonded_microcredits r98.bonded_microcredits into r111;\n    ternary r55 r39.microcredits_yield_per_epoch r98.microcredits_yield_per_epoch into r112;\n    ternary r55 r39.commission r98.commission into r113;\n    ternary r55 r39.boost r98.boost into r114;\n    cast r108 r109 r110 r111 r112 r113 r114 into r115 as validator_datum;\n    ternary r55 r52 r99 into r116;\n    ternary r54 r39.delegator r107.delegator into r117;\n    ternary r54 r39.validator r107.validator into r118;\n    ternary r54 r39.block_height r107.block_height into r119;\n    ternary r54 r39.bonded_microcredits r107.bonded_microcredits into r120;\n    ternary r54 r39.microcredits_yield_per_epoch r107.microcredits_yield_per_epoch into r121;\n    ternary r54 r39.commission r107.commission into r122;\n    ternary r54 r39.boost r107.boost into r123;\n    cast r117 r118 r119 r120 r121 r122 r123 into r124 as validator_datum;\n    ternary r54 r36.delegator r115.delegator into r125;\n    ternary r54 r36.validator r115.validator into r126;\n    ternary r54 r36.block_height r115.block_height into r127;\n    ternary r54 r36.bonded_microcredits r115.bonded_microcredits into r128;\n    ternary r54 r36.microcredits_yield_per_epoch r115.microcredits_yield_per_epoch into r129;\n    ternary r54 r36.commission r115.commission into r130;\n    ternary r54 r36.boost r115.boost into r131;\n    cast r125 r126 r127 r128 r129 r130 r131 into r132 as validator_datum;\n    ternary r54 r52 r116 into r133;\n    ternary r53 r36.delegator r124.delegator into r134;\n    ternary r53 r36.validator r124.validator into r135;\n    ternary r53 r36.block_height r124.block_height into r136;\n    ternary r53 r36.bonded_microcredits r124.bonded_microcredits into r137;\n    ternary r53 r36.microcredits_yield_per_epoch r124.microcredits_yield_per_epoch into r138;\n    ternary r53 r36.commission r124.commission into r139;\n    ternary r53 r36.boost r124.boost into r140;\n    cast r134 r135 r136 r137 r138 r139 r140 into r141 as validator_datum;\n    ternary r53 r39.delegator r132.delegator into r142;\n    ternary r53 r39.validator r132.validator into r143;\n    ternary r53 r39.block_height r132.block_height into r144;\n    ternary r53 r39.bonded_microcredits r132.bonded_microcredits into r145;\n    ternary r53 r39.microcredits_yield_per_epoch r132.microcredits_yield_per_epoch into r146;\n    ternary r53 r39.commission r132.commission into r147;\n    ternary r53 r39.boost r132.boost into r148;\n    cast r142 r143 r144 r145 r146 r147 r148 into r149 as validator_datum;\n    ternary r53 r52 r133 into r150;\n    ternary r51 r36.delegator r141.delegator into r151;\n    ternary r51 r36.validator r141.validator into r152;\n    ternary r51 r36.block_height r141.block_height into r153;\n    ternary r51 r36.bonded_microcredits r141.bonded_microcredits into r154;\n    ternary r51 r36.microcredits_yield_per_epoch r141.microcredits_yield_per_epoch into r155;\n    ternary r51 r36.commission r141.commission into r156;\n    ternary r51 r36.boost r141.boost into r157;\n    cast r151 r152 r153 r154 r155 r156 r157 into r158 as validator_datum;\n    ternary r51 r39.delegator r149.delegator into r159;\n    ternary r51 r39.validator r149.validator into r160;\n    ternary r51 r39.block_height r149.block_height into r161;\n    ternary r51 r39.bonded_microcredits r149.bonded_microcredits into r162;\n    ternary r51 r39.microcredits_yield_per_epoch r149.microcredits_yield_per_epoch into r163;\n    ternary r51 r39.commission r149.commission into r164;\n    ternary r51 r39.boost r149.boost into r165;\n    cast r159 r160 r161 r162 r163 r164 r165 into r166 as validator_datum;\n    ternary r51 true r150 into r167;\n    ternary false r39.delegator r158.delegator into r168;\n    ternary false r39.validator r158.validator into r169;\n    ternary false r39.block_height r158.block_height into r170;\n    ternary false r39.bonded_microcredits r158.bonded_microcredits into r171;\n    ternary false r39.microcredits_yield_per_epoch r158.microcredits_yield_per_epoch into r172;\n    ternary false r39.commission r158.commission into r173;\n    ternary false r39.boost r158.boost into r174;\n    cast r168 r169 r170 r171 r172 r173 r174 into r175 as validator_datum;\n    ternary false r36.delegator r166.delegator into r176;\n    ternary false r36.validator r166.validator into r177;\n    ternary false r36.block_height r166.block_height into r178;\n    ternary false r36.bonded_microcredits r166.bonded_microcredits into r179;\n    ternary false r36.microcredits_yield_per_epoch r166.microcredits_yield_per_epoch into r180;\n    ternary false r36.commission r166.commission into r181;\n    ternary false r36.boost r166.boost into r182;\n    cast r176 r177 r178 r179 r180 r181 r182 into r183 as validator_datum;\n    ternary false true r167 into r184;\n    is.eq r183.delegator r40.delegator into r185;\n    is.eq r183.validator r40.validator into r186;\n    lt r40.block_height r49 into r187;\n    lt r183.block_height r49 into r188;\n    is.eq r40.microcredits_yield_per_epoch 0u128 into r189;\n    is.eq r183.microcredits_yield_per_epoch 0u128 into r190;\n    mul r183.boost 10_000u128 into r191;\n    div r191 r50[1u32] into r192;\n    add r183.microcredits_yield_per_epoch r192 into r193;\n    mul r40.boost 10_000u128 into r194;\n    div r194 r50[1u32] into r195;\n    add r40.microcredits_yield_per_epoch r195 into r196;\n    gt r193 r196 into r197;\n    lt r193 r196 into r198;\n    ternary r186 r197 r198 into r199;\n    ternary r199 r40.delegator r183.delegator into r200;\n    ternary r199 r40.validator r183.validator into r201;\n    ternary r199 r40.block_height r183.block_height into r202;\n    ternary r199 r40.bonded_microcredits r183.bonded_microcredits into r203;\n    ternary r199 r40.microcredits_yield_per_epoch r183.microcredits_yield_per_epoch into r204;\n    ternary r199 r40.commission r183.commission into r205;\n    ternary r199 r40.boost r183.boost into r206;\n    cast r200 r201 r202 r203 r204 r205 r206 into r207 as validator_datum;\n    ternary r199 r183.delegator r40.delegator into r208;\n    ternary r199 r183.validator r40.validator into r209;\n    ternary r199 r183.block_height r40.block_height into r210;\n    ternary r199 r183.bonded_microcredits r40.bonded_microcredits into r211;\n    ternary r199 r183.microcredits_yield_per_epoch r40.microcredits_yield_per_epoch into r212;\n    ternary r199 r183.commission r40.commission into r213;\n    ternary r199 r183.boost r40.boost into r214;\n    cast r208 r209 r210 r211 r212 r213 r214 into r215 as validator_datum;\n    ternary r199 r186 r186 into r216;\n    ternary r190 r40.delegator r207.delegator into r217;\n    ternary r190 r40.validator r207.validator into r218;\n    ternary r190 r40.block_height r207.block_height into r219;\n    ternary r190 r40.bonded_microcredits r207.bonded_microcredits into r220;\n    ternary r190 r40.microcredits_yield_per_epoch r207.microcredits_yield_per_epoch into r221;\n    ternary r190 r40.commission r207.commission into r222;\n    ternary r190 r40.boost r207.boost into r223;\n    cast r217 r218 r219 r220 r221 r222 r223 into r224 as validator_datum;\n    ternary r190 r183.delegator r215.delegator into r225;\n    ternary r190 r183.validator r215.validator into r226;\n    ternary r190 r183.block_height r215.block_height into r227;\n    ternary r190 r183.bonded_microcredits r215.bonded_microcredits into r228;\n    ternary r190 r183.microcredits_yield_per_epoch r215.microcredits_yield_per_epoch into r229;\n    ternary r190 r183.commission r215.commission into r230;\n    ternary r190 r183.boost r215.boost into r231;\n    cast r225 r226 r227 r228 r229 r230 r231 into r232 as validator_datum;\n    ternary r190 r186 r216 into r233;\n    ternary r189 r183.delegator r224.delegator into r234;\n    ternary r189 r183.validator r224.validator into r235;\n    ternary r189 r183.block_height r224.block_height into r236;\n    ternary r189 r183.bonded_microcredits r224.bonded_microcredits into r237;\n    ternary r189 r183.microcredits_yield_per_epoch r224.microcredits_yield_per_epoch into r238;\n    ternary r189 r183.commission r224.commission into r239;\n    ternary r189 r183.boost r224.boost into r240;\n    cast r234 r235 r236 r237 r238 r239 r240 into r241 as validator_datum;\n    ternary r189 r40.delegator r232.delegator into r242;\n    ternary r189 r40.validator r232.validator into r243;\n    ternary r189 r40.block_height r232.block_height into r244;\n    ternary r189 r40.bonded_microcredits r232.bonded_microcredits into r245;\n    ternary r189 r40.microcredits_yield_per_epoch r232.microcredits_yield_per_epoch into r246;\n    ternary r189 r40.commission r232.commission into r247;\n    ternary r189 r40.boost r232.boost into r248;\n    cast r242 r243 r244 r245 r246 r247 r248 into r249 as validator_datum;\n    ternary r189 r186 r233 into r250;\n    ternary r188 r40.delegator r241.delegator into r251;\n    ternary r188 r40.validator r241.validator into r252;\n    ternary r188 r40.block_height r241.block_height into r253;\n    ternary r188 r40.bonded_microcredits r241.bonded_microcredits into r254;\n    ternary r188 r40.microcredits_yield_per_epoch r241.microcredits_yield_per_epoch into r255;\n    ternary r188 r40.commission r241.commission into r256;\n    ternary r188 r40.boost r241.boost into r257;\n    cast r251 r252 r253 r254 r255 r256 r257 into r258 as validator_datum;\n    ternary r188 r183.delegator r249.delegator into r259;\n    ternary r188 r183.validator r249.validator into r260;\n    ternary r188 r183.block_height r249.block_height into r261;\n    ternary r188 r183.bonded_microcredits r249.bonded_microcredits into r262;\n    ternary r188 r183.microcredits_yield_per_epoch r249.microcredits_yield_per_epoch into r263;\n    ternary r188 r183.commission r249.commission into r264;\n    ternary r188 r183.boost r249.boost into r265;\n    cast r259 r260 r261 r262 r263 r264 r265 into r266 as validator_datum;\n    ternary r188 r186 r250 into r267;\n    ternary r187 r183.delegator r258.delegator into r268;\n    ternary r187 r183.validator r258.validator into r269;\n    ternary r187 r183.block_height r258.block_height into r270;\n    ternary r187 r183.bonded_microcredits r258.bonded_microcredits into r271;\n    ternary r187 r183.microcredits_yield_per_epoch r258.microcredits_yield_per_epoch into r272;\n    ternary r187 r183.commission r258.commission into r273;\n    ternary r187 r183.boost r258.boost into r274;\n    cast r268 r269 r270 r271 r272 r273 r274 into r275 as validator_datum;\n    ternary r187 r40.delegator r266.delegator into r276;\n    ternary r187 r40.validator r266.validator into r277;\n    ternary r187 r40.block_height r266.block_height into r278;\n    ternary r187 r40.bonded_microcredits r266.bonded_microcredits into r279;\n    ternary r187 r40.microcredits_yield_per_epoch r266.microcredits_yield_per_epoch into r280;\n    ternary r187 r40.commission r266.commission into r281;\n    ternary r187 r40.boost r266.boost into r282;\n    cast r276 r277 r278 r279 r280 r281 r282 into r283 as validator_datum;\n    ternary r187 r186 r267 into r284;\n    ternary r185 r183.delegator r275.delegator into r285;\n    ternary r185 r183.validator r275.validator into r286;\n    ternary r185 r183.block_height r275.block_height into r287;\n    ternary r185 r183.bonded_microcredits r275.bonded_microcredits into r288;\n    ternary r185 r183.microcredits_yield_per_epoch r275.microcredits_yield_per_epoch into r289;\n    ternary r185 r183.commission r275.commission into r290;\n    ternary r185 r183.boost r275.boost into r291;\n    cast r285 r286 r287 r288 r289 r290 r291 into r292 as validator_datum;\n    ternary r185 r40.delegator r283.delegator into r293;\n    ternary r185 r40.validator r283.validator into r294;\n    ternary r185 r40.block_height r283.block_height into r295;\n    ternary r185 r40.bonded_microcredits r283.bonded_microcredits into r296;\n    ternary r185 r40.microcredits_yield_per_epoch r283.microcredits_yield_per_epoch into r297;\n    ternary r185 r40.commission r283.commission into r298;\n    ternary r185 r40.boost r283.boost into r299;\n    cast r293 r294 r295 r296 r297 r298 r299 into r300 as validator_datum;\n    ternary r185 true r284 into r301;\n    ternary r184 r40.delegator r292.delegator into r302;\n    ternary r184 r40.validator r292.validator into r303;\n    ternary r184 r40.block_height r292.block_height into r304;\n    ternary r184 r40.bonded_microcredits r292.bonded_microcredits into r305;\n    ternary r184 r40.microcredits_yield_per_epoch r292.microcredits_yield_per_epoch into r306;\n    ternary r184 r40.commission r292.commission into r307;\n    ternary r184 r40.boost r292.boost into r308;\n    cast r302 r303 r304 r305 r306 r307 r308 into r309 as validator_datum;\n    ternary r184 r183.delegator r300.delegator into r310;\n    ternary r184 r183.validator r300.validator into r311;\n    ternary r184 r183.block_height r300.block_height into r312;\n    ternary r184 r183.bonded_microcredits r300.bonded_microcredits into r313;\n    ternary r184 r183.microcredits_yield_per_epoch r300.microcredits_yield_per_epoch into r314;\n    ternary r184 r183.commission r300.commission into r315;\n    ternary r184 r183.boost r300.boost into r316;\n    cast r310 r311 r312 r313 r314 r315 r316 into r317 as validator_datum;\n    ternary r184 true r301 into r318;\n    is.eq r317.delegator r41.delegator into r319;\n    is.eq r317.validator r41.validator into r320;\n    lt r41.block_height r49 into r321;\n    lt r317.block_height r49 into r322;\n    is.eq r41.microcredits_yield_per_epoch 0u128 into r323;\n    is.eq r317.microcredits_yield_per_epoch 0u128 into r324;\n    mul r317.boost 10_000u128 into r325;\n    div r325 r50[2u32] into r326;\n    add r317.microcredits_yield_per_epoch r326 into r327;\n    mul r41.boost 10_000u128 into r328;\n    div r328 r50[2u32] into r329;\n    add r41.microcredits_yield_per_epoch r329 into r330;\n    gt r327 r330 into r331;\n    lt r327 r330 into r332;\n    ternary r320 r331 r332 into r333;\n    ternary r333 r41.delegator r317.delegator into r334;\n    ternary r333 r41.validator r317.validator into r335;\n    ternary r333 r41.block_height r317.block_height into r336;\n    ternary r333 r41.bonded_microcredits r317.bonded_microcredits into r337;\n    ternary r333 r41.microcredits_yield_per_epoch r317.microcredits_yield_per_epoch into r338;\n    ternary r333 r41.commission r317.commission into r339;\n    ternary r333 r41.boost r317.boost into r340;\n    cast r334 r335 r336 r337 r338 r339 r340 into r341 as validator_datum;\n    ternary r333 r317.delegator r41.delegator into r342;\n    ternary r333 r317.validator r41.validator into r343;\n    ternary r333 r317.block_height r41.block_height into r344;\n    ternary r333 r317.bonded_microcredits r41.bonded_microcredits into r345;\n    ternary r333 r317.microcredits_yield_per_epoch r41.microcredits_yield_per_epoch into r346;\n    ternary r333 r317.commission r41.commission into r347;\n    ternary r333 r317.boost r41.boost into r348;\n    cast r342 r343 r344 r345 r346 r347 r348 into r349 as validator_datum;\n    ternary r333 r320 r320 into r350;\n    ternary r324 r41.delegator r341.delegator into r351;\n    ternary r324 r41.validator r341.validator into r352;\n    ternary r324 r41.block_height r341.block_height into r353;\n    ternary r324 r41.bonded_microcredits r341.bonded_microcredits into r354;\n    ternary r324 r41.microcredits_yield_per_epoch r341.microcredits_yield_per_epoch into r355;\n    ternary r324 r41.commission r341.commission into r356;\n    ternary r324 r41.boost r341.boost into r357;\n    cast r351 r352 r353 r354 r355 r356 r357 into r358 as validator_datum;\n    ternary r324 r317.delegator r349.delegator into r359;\n    ternary r324 r317.validator r349.validator into r360;\n    ternary r324 r317.block_height r349.block_height into r361;\n    ternary r324 r317.bonded_microcredits r349.bonded_microcredits into r362;\n    ternary r324 r317.microcredits_yield_per_epoch r349.microcredits_yield_per_epoch into r363;\n    ternary r324 r317.commission r349.commission into r364;\n    ternary r324 r317.boost r349.boost into r365;\n    cast r359 r360 r361 r362 r363 r364 r365 into r366 as validator_datum;\n    ternary r324 r320 r350 into r367;\n    ternary r323 r317.delegator r358.delegator into r368;\n    ternary r323 r317.validator r358.validator into r369;\n    ternary r323 r317.block_height r358.block_height into r370;\n    ternary r323 r317.bonded_microcredits r358.bonded_microcredits into r371;\n    ternary r323 r317.microcredits_yield_per_epoch r358.microcredits_yield_per_epoch into r372;\n    ternary r323 r317.commission r358.commission into r373;\n    ternary r323 r317.boost r358.boost into r374;\n    cast r368 r369 r370 r371 r372 r373 r374 into r375 as validator_datum;\n    ternary r323 r41.delegator r366.delegator into r376;\n    ternary r323 r41.validator r366.validator into r377;\n    ternary r323 r41.block_height r366.block_height into r378;\n    ternary r323 r41.bonded_microcredits r366.bonded_microcredits into r379;\n    ternary r323 r41.microcredits_yield_per_epoch r366.microcredits_yield_per_epoch into r380;\n    ternary r323 r41.commission r366.commission into r381;\n    ternary r323 r41.boost r366.boost into r382;\n    cast r376 r377 r378 r379 r380 r381 r382 into r383 as validator_datum;\n    ternary r323 r320 r367 into r384;\n    ternary r322 r41.delegator r375.delegator into r385;\n    ternary r322 r41.validator r375.validator into r386;\n    ternary r322 r41.block_height r375.block_height into r387;\n    ternary r322 r41.bonded_microcredits r375.bonded_microcredits into r388;\n    ternary r322 r41.microcredits_yield_per_epoch r375.microcredits_yield_per_epoch into r389;\n    ternary r322 r41.commission r375.commission into r390;\n    ternary r322 r41.boost r375.boost into r391;\n    cast r385 r386 r387 r388 r389 r390 r391 into r392 as validator_datum;\n    ternary r322 r317.delegator r383.delegator into r393;\n    ternary r322 r317.validator r383.validator into r394;\n    ternary r322 r317.block_height r383.block_height into r395;\n    ternary r322 r317.bonded_microcredits r383.bonded_microcredits into r396;\n    ternary r322 r317.microcredits_yield_per_epoch r383.microcredits_yield_per_epoch into r397;\n    ternary r322 r317.commission r383.commission into r398;\n    ternary r322 r317.boost r383.boost into r399;\n    cast r393 r394 r395 r396 r397 r398 r399 into r400 as validator_datum;\n    ternary r322 r320 r384 into r401;\n    ternary r321 r317.delegator r392.delegator into r402;\n    ternary r321 r317.validator r392.validator into r403;\n    ternary r321 r317.block_height r392.block_height into r404;\n    ternary r321 r317.bonded_microcredits r392.bonded_microcredits into r405;\n    ternary r321 r317.microcredits_yield_per_epoch r392.microcredits_yield_per_epoch into r406;\n    ternary r321 r317.commission r392.commission into r407;\n    ternary r321 r317.boost r392.boost into r408;\n    cast r402 r403 r404 r405 r406 r407 r408 into r409 as validator_datum;\n    ternary r321 r41.delegator r400.delegator into r410;\n    ternary r321 r41.validator r400.validator into r411;\n    ternary r321 r41.block_height r400.block_height into r412;\n    ternary r321 r41.bonded_microcredits r400.bonded_microcredits into r413;\n    ternary r321 r41.microcredits_yield_per_epoch r400.microcredits_yield_per_epoch into r414;\n    ternary r321 r41.commission r400.commission into r415;\n    ternary r321 r41.boost r400.boost into r416;\n    cast r410 r411 r412 r413 r414 r415 r416 into r417 as validator_datum;\n    ternary r321 r320 r401 into r418;\n    ternary r319 r317.delegator r409.delegator into r419;\n    ternary r319 r317.validator r409.validator into r420;\n    ternary r319 r317.block_height r409.block_height into r421;\n    ternary r319 r317.bonded_microcredits r409.bonded_microcredits into r422;\n    ternary r319 r317.microcredits_yield_per_epoch r409.microcredits_yield_per_epoch into r423;\n    ternary r319 r317.commission r409.commission into r424;\n    ternary r319 r317.boost r409.boost into r425;\n    cast r419 r420 r421 r422 r423 r424 r425 into r426 as validator_datum;\n    ternary r319 r41.delegator r417.delegator into r427;\n    ternary r319 r41.validator r417.validator into r428;\n    ternary r319 r41.block_height r417.block_height into r429;\n    ternary r319 r41.bonded_microcredits r417.bonded_microcredits into r430;\n    ternary r319 r41.microcredits_yield_per_epoch r417.microcredits_yield_per_epoch into r431;\n    ternary r319 r41.commission r417.commission into r432;\n    ternary r319 r41.boost r417.boost into r433;\n    cast r427 r428 r429 r430 r431 r432 r433 into r434 as validator_datum;\n    ternary r319 true r418 into r435;\n    ternary r318 r41.delegator r426.delegator into r436;\n    ternary r318 r41.validator r426.validator into r437;\n    ternary r318 r41.block_height r426.block_height into r438;\n    ternary r318 r41.bonded_microcredits r426.bonded_microcredits into r439;\n    ternary r318 r41.microcredits_yield_per_epoch r426.microcredits_yield_per_epoch into r440;\n    ternary r318 r41.commission r426.commission into r441;\n    ternary r318 r41.boost r426.boost into r442;\n    cast r436 r437 r438 r439 r440 r441 r442 into r443 as validator_datum;\n    ternary r318 r317.delegator r434.delegator into r444;\n    ternary r318 r317.validator r434.validator into r445;\n    ternary r318 r317.block_height r434.block_height into r446;\n    ternary r318 r317.bonded_microcredits r434.bonded_microcredits into r447;\n    ternary r318 r317.microcredits_yield_per_epoch r434.microcredits_yield_per_epoch into r448;\n    ternary r318 r317.commission r434.commission into r449;\n    ternary r318 r317.boost r434.boost into r450;\n    cast r444 r445 r446 r447 r448 r449 r450 into r451 as validator_datum;\n    ternary r318 true r435 into r452;\n    is.eq r451.delegator r42.delegator into r453;\n    is.eq r451.validator r42.validator into r454;\n    lt r42.block_height r49 into r455;\n    lt r451.block_height r49 into r456;\n    is.eq r42.microcredits_yield_per_epoch 0u128 into r457;\n    is.eq r451.microcredits_yield_per_epoch 0u128 into r458;\n    mul r451.boost 10_000u128 into r459;\n    div r459 r50[3u32] into r460;\n    add r451.microcredits_yield_per_epoch r460 into r461;\n    mul r42.boost 10_000u128 into r462;\n    div r462 r50[3u32] into r463;\n    add r42.microcredits_yield_per_epoch r463 into r464;\n    gt r461 r464 into r465;\n    lt r461 r464 into r466;\n    ternary r454 r465 r466 into r467;\n    ternary r467 r42.delegator r451.delegator into r468;\n    ternary r467 r42.validator r451.validator into r469;\n    ternary r467 r42.block_height r451.block_height into r470;\n    ternary r467 r42.bonded_microcredits r451.bonded_microcredits into r471;\n    ternary r467 r42.microcredits_yield_per_epoch r451.microcredits_yield_per_epoch into r472;\n    ternary r467 r42.commission r451.commission into r473;\n    ternary r467 r42.boost r451.boost into r474;\n    cast r468 r469 r470 r471 r472 r473 r474 into r475 as validator_datum;\n    ternary r467 r451.delegator r42.delegator into r476;\n    ternary r467 r451.validator r42.validator into r477;\n    ternary r467 r451.block_height r42.block_height into r478;\n    ternary r467 r451.bonded_microcredits r42.bonded_microcredits into r479;\n    ternary r467 r451.microcredits_yield_per_epoch r42.microcredits_yield_per_epoch into r480;\n    ternary r467 r451.commission r42.commission into r481;\n    ternary r467 r451.boost r42.boost into r482;\n    cast r476 r477 r478 r479 r480 r481 r482 into r483 as validator_datum;\n    ternary r467 r454 r454 into r484;\n    ternary r458 r42.delegator r475.delegator into r485;\n    ternary r458 r42.validator r475.validator into r486;\n    ternary r458 r42.block_height r475.block_height into r487;\n    ternary r458 r42.bonded_microcredits r475.bonded_microcredits into r488;\n    ternary r458 r42.microcredits_yield_per_epoch r475.microcredits_yield_per_epoch into r489;\n    ternary r458 r42.commission r475.commission into r490;\n    ternary r458 r42.boost r475.boost into r491;\n    cast r485 r486 r487 r488 r489 r490 r491 into r492 as validator_datum;\n    ternary r458 r451.delegator r483.delegator into r493;\n    ternary r458 r451.validator r483.validator into r494;\n    ternary r458 r451.block_height r483.block_height into r495;\n    ternary r458 r451.bonded_microcredits r483.bonded_microcredits into r496;\n    ternary r458 r451.microcredits_yield_per_epoch r483.microcredits_yield_per_epoch into r497;\n    ternary r458 r451.commission r483.commission into r498;\n    ternary r458 r451.boost r483.boost into r499;\n    cast r493 r494 r495 r496 r497 r498 r499 into r500 as validator_datum;\n    ternary r458 r454 r484 into r501;\n    ternary r457 r451.delegator r492.delegator into r502;\n    ternary r457 r451.validator r492.validator into r503;\n    ternary r457 r451.block_height r492.block_height into r504;\n    ternary r457 r451.bonded_microcredits r492.bonded_microcredits into r505;\n    ternary r457 r451.microcredits_yield_per_epoch r492.microcredits_yield_per_epoch into r506;\n    ternary r457 r451.commission r492.commission into r507;\n    ternary r457 r451.boost r492.boost into r508;\n    cast r502 r503 r504 r505 r506 r507 r508 into r509 as validator_datum;\n    ternary r457 r42.delegator r500.delegator into r510;\n    ternary r457 r42.validator r500.validator into r511;\n    ternary r457 r42.block_height r500.block_height into r512;\n    ternary r457 r42.bonded_microcredits r500.bonded_microcredits into r513;\n    ternary r457 r42.microcredits_yield_per_epoch r500.microcredits_yield_per_epoch into r514;\n    ternary r457 r42.commission r500.commission into r515;\n    ternary r457 r42.boost r500.boost into r516;\n    cast r510 r511 r512 r513 r514 r515 r516 into r517 as validator_datum;\n    ternary r457 r454 r501 into r518;\n    ternary r456 r42.delegator r509.delegator into r519;\n    ternary r456 r42.validator r509.validator into r520;\n    ternary r456 r42.block_height r509.block_height into r521;\n    ternary r456 r42.bonded_microcredits r509.bonded_microcredits into r522;\n    ternary r456 r42.microcredits_yield_per_epoch r509.microcredits_yield_per_epoch into r523;\n    ternary r456 r42.commission r509.commission into r524;\n    ternary r456 r42.boost r509.boost into r525;\n    cast r519 r520 r521 r522 r523 r524 r525 into r526 as validator_datum;\n    ternary r456 r451.delegator r517.delegator into r527;\n    ternary r456 r451.validator r517.validator into r528;\n    ternary r456 r451.block_height r517.block_height into r529;\n    ternary r456 r451.bonded_microcredits r517.bonded_microcredits into r530;\n    ternary r456 r451.microcredits_yield_per_epoch r517.microcredits_yield_per_epoch into r531;\n    ternary r456 r451.commission r517.commission into r532;\n    ternary r456 r451.boost r517.boost into r533;\n    cast r527 r528 r529 r530 r531 r532 r533 into r534 as validator_datum;\n    ternary r456 r454 r518 into r535;\n    ternary r455 r451.delegator r526.delegator into r536;\n    ternary r455 r451.validator r526.validator into r537;\n    ternary r455 r451.block_height r526.block_height into r538;\n    ternary r455 r451.bonded_microcredits r526.bonded_microcredits into r539;\n    ternary r455 r451.microcredits_yield_per_epoch r526.microcredits_yield_per_epoch into r540;\n    ternary r455 r451.commission r526.commission into r541;\n    ternary r455 r451.boost r526.boost into r542;\n    cast r536 r537 r538 r539 r540 r541 r542 into r543 as validator_datum;\n    ternary r455 r42.delegator r534.delegator into r544;\n    ternary r455 r42.validator r534.validator into r545;\n    ternary r455 r42.block_height r534.block_height into r546;\n    ternary r455 r42.bonded_microcredits r534.bonded_microcredits into r547;\n    ternary r455 r42.microcredits_yield_per_epoch r534.microcredits_yield_per_epoch into r548;\n    ternary r455 r42.commission r534.commission into r549;\n    ternary r455 r42.boost r534.boost into r550;\n    cast r544 r545 r546 r547 r548 r549 r550 into r551 as validator_datum;\n    ternary r455 r454 r535 into r552;\n    ternary r453 r451.delegator r543.delegator into r553;\n    ternary r453 r451.validator r543.validator into r554;\n    ternary r453 r451.block_height r543.block_height into r555;\n    ternary r453 r451.bonded_microcredits r543.bonded_microcredits into r556;\n    ternary r453 r451.microcredits_yield_per_epoch r543.microcredits_yield_per_epoch into r557;\n    ternary r453 r451.commission r543.commission into r558;\n    ternary r453 r451.boost r543.boost into r559;\n    cast r553 r554 r555 r556 r557 r558 r559 into r560 as validator_datum;\n    ternary r453 r42.delegator r551.delegator into r561;\n    ternary r453 r42.validator r551.validator into r562;\n    ternary r453 r42.block_height r551.block_height into r563;\n    ternary r453 r42.bonded_microcredits r551.bonded_microcredits into r564;\n    ternary r453 r42.microcredits_yield_per_epoch r551.microcredits_yield_per_epoch into r565;\n    ternary r453 r42.commission r551.commission into r566;\n    ternary r453 r42.boost r551.boost into r567;\n    cast r561 r562 r563 r564 r565 r566 r567 into r568 as validator_datum;\n    ternary r453 true r552 into r569;\n    ternary r452 r42.delegator r560.delegator into r570;\n    ternary r452 r42.validator r560.validator into r571;\n    ternary r452 r42.block_height r560.block_height into r572;\n    ternary r452 r42.bonded_microcredits r560.bonded_microcredits into r573;\n    ternary r452 r42.microcredits_yield_per_epoch r560.microcredits_yield_per_epoch into r574;\n    ternary r452 r42.commission r560.commission into r575;\n    ternary r452 r42.boost r560.boost into r576;\n    cast r570 r571 r572 r573 r574 r575 r576 into r577 as validator_datum;\n    ternary r452 r451.delegator r568.delegator into r578;\n    ternary r452 r451.validator r568.validator into r579;\n    ternary r452 r451.block_height r568.block_height into r580;\n    ternary r452 r451.bonded_microcredits r568.bonded_microcredits into r581;\n    ternary r452 r451.microcredits_yield_per_epoch r568.microcredits_yield_per_epoch into r582;\n    ternary r452 r451.commission r568.commission into r583;\n    ternary r452 r451.boost r568.boost into r584;\n    cast r578 r579 r580 r581 r582 r583 r584 into r585 as validator_datum;\n    ternary r452 true r569 into r586;\n    is.eq r585.delegator r43.delegator into r587;\n    is.eq r585.validator r43.validator into r588;\n    lt r43.block_height r49 into r589;\n    lt r585.block_height r49 into r590;\n    is.eq r43.microcredits_yield_per_epoch 0u128 into r591;\n    is.eq r585.microcredits_yield_per_epoch 0u128 into r592;\n    mul r585.boost 10_000u128 into r593;\n    div r593 r50[4u32] into r594;\n    add r585.microcredits_yield_per_epoch r594 into r595;\n    mul r43.boost 10_000u128 into r596;\n    div r596 r50[4u32] into r597;\n    add r43.microcredits_yield_per_epoch r597 into r598;\n    gt r595 r598 into r599;\n    lt r595 r598 into r600;\n    ternary r588 r599 r600 into r601;\n    ternary r601 r43.delegator r585.delegator into r602;\n    ternary r601 r43.validator r585.validator into r603;\n    ternary r601 r43.block_height r585.block_height into r604;\n    ternary r601 r43.bonded_microcredits r585.bonded_microcredits into r605;\n    ternary r601 r43.microcredits_yield_per_epoch r585.microcredits_yield_per_epoch into r606;\n    ternary r601 r43.commission r585.commission into r607;\n    ternary r601 r43.boost r585.boost into r608;\n    cast r602 r603 r604 r605 r606 r607 r608 into r609 as validator_datum;\n    ternary r601 r585.delegator r43.delegator into r610;\n    ternary r601 r585.validator r43.validator into r611;\n    ternary r601 r585.block_height r43.block_height into r612;\n    ternary r601 r585.bonded_microcredits r43.bonded_microcredits into r613;\n    ternary r601 r585.microcredits_yield_per_epoch r43.microcredits_yield_per_epoch into r614;\n    ternary r601 r585.commission r43.commission into r615;\n    ternary r601 r585.boost r43.boost into r616;\n    cast r610 r611 r612 r613 r614 r615 r616 into r617 as validator_datum;\n    ternary r601 r588 r588 into r618;\n    ternary r592 r43.delegator r609.delegator into r619;\n    ternary r592 r43.validator r609.validator into r620;\n    ternary r592 r43.block_height r609.block_height into r621;\n    ternary r592 r43.bonded_microcredits r609.bonded_microcredits into r622;\n    ternary r592 r43.microcredits_yield_per_epoch r609.microcredits_yield_per_epoch into r623;\n    ternary r592 r43.commission r609.commission into r624;\n    ternary r592 r43.boost r609.boost into r625;\n    cast r619 r620 r621 r622 r623 r624 r625 into r626 as validator_datum;\n    ternary r592 r585.delegator r617.delegator into r627;\n    ternary r592 r585.validator r617.validator into r628;\n    ternary r592 r585.block_height r617.block_height into r629;\n    ternary r592 r585.bonded_microcredits r617.bonded_microcredits into r630;\n    ternary r592 r585.microcredits_yield_per_epoch r617.microcredits_yield_per_epoch into r631;\n    ternary r592 r585.commission r617.commission into r632;\n    ternary r592 r585.boost r617.boost into r633;\n    cast r627 r628 r629 r630 r631 r632 r633 into r634 as validator_datum;\n    ternary r592 r588 r618 into r635;\n    ternary r591 r585.delegator r626.delegator into r636;\n    ternary r591 r585.validator r626.validator into r637;\n    ternary r591 r585.block_height r626.block_height into r638;\n    ternary r591 r585.bonded_microcredits r626.bonded_microcredits into r639;\n    ternary r591 r585.microcredits_yield_per_epoch r626.microcredits_yield_per_epoch into r640;\n    ternary r591 r585.commission r626.commission into r641;\n    ternary r591 r585.boost r626.boost into r642;\n    cast r636 r637 r638 r639 r640 r641 r642 into r643 as validator_datum;\n    ternary r591 r43.delegator r634.delegator into r644;\n    ternary r591 r43.validator r634.validator into r645;\n    ternary r591 r43.block_height r634.block_height into r646;\n    ternary r591 r43.bonded_microcredits r634.bonded_microcredits into r647;\n    ternary r591 r43.microcredits_yield_per_epoch r634.microcredits_yield_per_epoch into r648;\n    ternary r591 r43.commission r634.commission into r649;\n    ternary r591 r43.boost r634.boost into r650;\n    cast r644 r645 r646 r647 r648 r649 r650 into r651 as validator_datum;\n    ternary r591 r588 r635 into r652;\n    ternary r590 r43.delegator r643.delegator into r653;\n    ternary r590 r43.validator r643.validator into r654;\n    ternary r590 r43.block_height r643.block_height into r655;\n    ternary r590 r43.bonded_microcredits r643.bonded_microcredits into r656;\n    ternary r590 r43.microcredits_yield_per_epoch r643.microcredits_yield_per_epoch into r657;\n    ternary r590 r43.commission r643.commission into r658;\n    ternary r590 r43.boost r643.boost into r659;\n    cast r653 r654 r655 r656 r657 r658 r659 into r660 as validator_datum;\n    ternary r590 r585.delegator r651.delegator into r661;\n    ternary r590 r585.validator r651.validator into r662;\n    ternary r590 r585.block_height r651.block_height into r663;\n    ternary r590 r585.bonded_microcredits r651.bonded_microcredits into r664;\n    ternary r590 r585.microcredits_yield_per_epoch r651.microcredits_yield_per_epoch into r665;\n    ternary r590 r585.commission r651.commission into r666;\n    ternary r590 r585.boost r651.boost into r667;\n    cast r661 r662 r663 r664 r665 r666 r667 into r668 as validator_datum;\n    ternary r590 r588 r652 into r669;\n    ternary r589 r585.delegator r660.delegator into r670;\n    ternary r589 r585.validator r660.validator into r671;\n    ternary r589 r585.block_height r660.block_height into r672;\n    ternary r589 r585.bonded_microcredits r660.bonded_microcredits into r673;\n    ternary r589 r585.microcredits_yield_per_epoch r660.microcredits_yield_per_epoch into r674;\n    ternary r589 r585.commission r660.commission into r675;\n    ternary r589 r585.boost r660.boost into r676;\n    cast r670 r671 r672 r673 r674 r675 r676 into r677 as validator_datum;\n    ternary r589 r43.delegator r668.delegator into r678;\n    ternary r589 r43.validator r668.validator into r679;\n    ternary r589 r43.block_height r668.block_height into r680;\n    ternary r589 r43.bonded_microcredits r668.bonded_microcredits into r681;\n    ternary r589 r43.microcredits_yield_per_epoch r668.microcredits_yield_per_epoch into r682;\n    ternary r589 r43.commission r668.commission into r683;\n    ternary r589 r43.boost r668.boost into r684;\n    cast r678 r679 r680 r681 r682 r683 r684 into r685 as validator_datum;\n    ternary r589 r588 r669 into r686;\n    ternary r587 r585.delegator r677.delegator into r687;\n    ternary r587 r585.validator r677.validator into r688;\n    ternary r587 r585.block_height r677.block_height into r689;\n    ternary r587 r585.bonded_microcredits r677.bonded_microcredits into r690;\n    ternary r587 r585.microcredits_yield_per_epoch r677.microcredits_yield_per_epoch into r691;\n    ternary r587 r585.commission r677.commission into r692;\n    ternary r587 r585.boost r677.boost into r693;\n    cast r687 r688 r689 r690 r691 r692 r693 into r694 as validator_datum;\n    ternary r587 r43.delegator r685.delegator into r695;\n    ternary r587 r43.validator r685.validator into r696;\n    ternary r587 r43.block_height r685.block_height into r697;\n    ternary r587 r43.bonded_microcredits r685.bonded_microcredits into r698;\n    ternary r587 r43.microcredits_yield_per_epoch r685.microcredits_yield_per_epoch into r699;\n    ternary r587 r43.commission r685.commission into r700;\n    ternary r587 r43.boost r685.boost into r701;\n    cast r695 r696 r697 r698 r699 r700 r701 into r702 as validator_datum;\n    ternary r587 true r686 into r703;\n    ternary r586 r43.delegator r694.delegator into r704;\n    ternary r586 r43.validator r694.validator into r705;\n    ternary r586 r43.block_height r694.block_height into r706;\n    ternary r586 r43.bonded_microcredits r694.bonded_microcredits into r707;\n    ternary r586 r43.microcredits_yield_per_epoch r694.microcredits_yield_per_epoch into r708;\n    ternary r586 r43.commission r694.commission into r709;\n    ternary r586 r43.boost r694.boost into r710;\n    cast r704 r705 r706 r707 r708 r709 r710 into r711 as validator_datum;\n    ternary r586 r585.delegator r702.delegator into r712;\n    ternary r586 r585.validator r702.validator into r713;\n    ternary r586 r585.block_height r702.block_height into r714;\n    ternary r586 r585.bonded_microcredits r702.bonded_microcredits into r715;\n    ternary r586 r585.microcredits_yield_per_epoch r702.microcredits_yield_per_epoch into r716;\n    ternary r586 r585.commission r702.commission into r717;\n    ternary r586 r585.boost r702.boost into r718;\n    cast r712 r713 r714 r715 r716 r717 r718 into r719 as validator_datum;\n    ternary r586 true r703 into r720;\n    is.eq r719.delegator r44.delegator into r721;\n    is.eq r719.validator r44.validator into r722;\n    lt r44.block_height r49 into r723;\n    lt r719.block_height r49 into r724;\n    is.eq r44.microcredits_yield_per_epoch 0u128 into r725;\n    is.eq r719.microcredits_yield_per_epoch 0u128 into r726;\n    mul r719.boost 10_000u128 into r727;\n    div r727 r50[5u32] into r728;\n    add r719.microcredits_yield_per_epoch r728 into r729;\n    mul r44.boost 10_000u128 into r730;\n    div r730 r50[5u32] into r731;\n    add r44.microcredits_yield_per_epoch r731 into r732;\n    gt r729 r732 into r733;\n    lt r729 r732 into r734;\n    ternary r722 r733 r734 into r735;\n    ternary r735 r44.delegator r719.delegator into r736;\n    ternary r735 r44.validator r719.validator into r737;\n    ternary r735 r44.block_height r719.block_height into r738;\n    ternary r735 r44.bonded_microcredits r719.bonded_microcredits into r739;\n    ternary r735 r44.microcredits_yield_per_epoch r719.microcredits_yield_per_epoch into r740;\n    ternary r735 r44.commission r719.commission into r741;\n    ternary r735 r44.boost r719.boost into r742;\n    cast r736 r737 r738 r739 r740 r741 r742 into r743 as validator_datum;\n    ternary r735 r719.delegator r44.delegator into r744;\n    ternary r735 r719.validator r44.validator into r745;\n    ternary r735 r719.block_height r44.block_height into r746;\n    ternary r735 r719.bonded_microcredits r44.bonded_microcredits into r747;\n    ternary r735 r719.microcredits_yield_per_epoch r44.microcredits_yield_per_epoch into r748;\n    ternary r735 r719.commission r44.commission into r749;\n    ternary r735 r719.boost r44.boost into r750;\n    cast r744 r745 r746 r747 r748 r749 r750 into r751 as validator_datum;\n    ternary r735 r722 r722 into r752;\n    ternary r726 r44.delegator r743.delegator into r753;\n    ternary r726 r44.validator r743.validator into r754;\n    ternary r726 r44.block_height r743.block_height into r755;\n    ternary r726 r44.bonded_microcredits r743.bonded_microcredits into r756;\n    ternary r726 r44.microcredits_yield_per_epoch r743.microcredits_yield_per_epoch into r757;\n    ternary r726 r44.commission r743.commission into r758;\n    ternary r726 r44.boost r743.boost into r759;\n    cast r753 r754 r755 r756 r757 r758 r759 into r760 as validator_datum;\n    ternary r726 r719.delegator r751.delegator into r761;\n    ternary r726 r719.validator r751.validator into r762;\n    ternary r726 r719.block_height r751.block_height into r763;\n    ternary r726 r719.bonded_microcredits r751.bonded_microcredits into r764;\n    ternary r726 r719.microcredits_yield_per_epoch r751.microcredits_yield_per_epoch into r765;\n    ternary r726 r719.commission r751.commission into r766;\n    ternary r726 r719.boost r751.boost into r767;\n    cast r761 r762 r763 r764 r765 r766 r767 into r768 as validator_datum;\n    ternary r726 r722 r752 into r769;\n    ternary r725 r719.delegator r760.delegator into r770;\n    ternary r725 r719.validator r760.validator into r771;\n    ternary r725 r719.block_height r760.block_height into r772;\n    ternary r725 r719.bonded_microcredits r760.bonded_microcredits into r773;\n    ternary r725 r719.microcredits_yield_per_epoch r760.microcredits_yield_per_epoch into r774;\n    ternary r725 r719.commission r760.commission into r775;\n    ternary r725 r719.boost r760.boost into r776;\n    cast r770 r771 r772 r773 r774 r775 r776 into r777 as validator_datum;\n    ternary r725 r44.delegator r768.delegator into r778;\n    ternary r725 r44.validator r768.validator into r779;\n    ternary r725 r44.block_height r768.block_height into r780;\n    ternary r725 r44.bonded_microcredits r768.bonded_microcredits into r781;\n    ternary r725 r44.microcredits_yield_per_epoch r768.microcredits_yield_per_epoch into r782;\n    ternary r725 r44.commission r768.commission into r783;\n    ternary r725 r44.boost r768.boost into r784;\n    cast r778 r779 r780 r781 r782 r783 r784 into r785 as validator_datum;\n    ternary r725 r722 r769 into r786;\n    ternary r724 r44.delegator r777.delegator into r787;\n    ternary r724 r44.validator r777.validator into r788;\n    ternary r724 r44.block_height r777.block_height into r789;\n    ternary r724 r44.bonded_microcredits r777.bonded_microcredits into r790;\n    ternary r724 r44.microcredits_yield_per_epoch r777.microcredits_yield_per_epoch into r791;\n    ternary r724 r44.commission r777.commission into r792;\n    ternary r724 r44.boost r777.boost into r793;\n    cast r787 r788 r789 r790 r791 r792 r793 into r794 as validator_datum;\n    ternary r724 r719.delegator r785.delegator into r795;\n    ternary r724 r719.validator r785.validator into r796;\n    ternary r724 r719.block_height r785.block_height into r797;\n    ternary r724 r719.bonded_microcredits r785.bonded_microcredits into r798;\n    ternary r724 r719.microcredits_yield_per_epoch r785.microcredits_yield_per_epoch into r799;\n    ternary r724 r719.commission r785.commission into r800;\n    ternary r724 r719.boost r785.boost into r801;\n    cast r795 r796 r797 r798 r799 r800 r801 into r802 as validator_datum;\n    ternary r724 r722 r786 into r803;\n    ternary r723 r719.delegator r794.delegator into r804;\n    ternary r723 r719.validator r794.validator into r805;\n    ternary r723 r719.block_height r794.block_height into r806;\n    ternary r723 r719.bonded_microcredits r794.bonded_microcredits into r807;\n    ternary r723 r719.microcredits_yield_per_epoch r794.microcredits_yield_per_epoch into r808;\n    ternary r723 r719.commission r794.commission into r809;\n    ternary r723 r719.boost r794.boost into r810;\n    cast r804 r805 r806 r807 r808 r809 r810 into r811 as validator_datum;\n    ternary r723 r44.delegator r802.delegator into r812;\n    ternary r723 r44.validator r802.validator into r813;\n    ternary r723 r44.block_height r802.block_height into r814;\n    ternary r723 r44.bonded_microcredits r802.bonded_microcredits into r815;\n    ternary r723 r44.microcredits_yield_per_epoch r802.microcredits_yield_per_epoch into r816;\n    ternary r723 r44.commission r802.commission into r817;\n    ternary r723 r44.boost r802.boost into r818;\n    cast r812 r813 r814 r815 r816 r817 r818 into r819 as validator_datum;\n    ternary r723 r722 r803 into r820;\n    ternary r721 r719.delegator r811.delegator into r821;\n    ternary r721 r719.validator r811.validator into r822;\n    ternary r721 r719.block_height r811.block_height into r823;\n    ternary r721 r719.bonded_microcredits r811.bonded_microcredits into r824;\n    ternary r721 r719.microcredits_yield_per_epoch r811.microcredits_yield_per_epoch into r825;\n    ternary r721 r719.commission r811.commission into r826;\n    ternary r721 r719.boost r811.boost into r827;\n    cast r821 r822 r823 r824 r825 r826 r827 into r828 as validator_datum;\n    ternary r721 r44.delegator r819.delegator into r829;\n    ternary r721 r44.validator r819.validator into r830;\n    ternary r721 r44.block_height r819.block_height into r831;\n    ternary r721 r44.bonded_microcredits r819.bonded_microcredits into r832;\n    ternary r721 r44.microcredits_yield_per_epoch r819.microcredits_yield_per_epoch into r833;\n    ternary r721 r44.commission r819.commission into r834;\n    ternary r721 r44.boost r819.boost into r835;\n    cast r829 r830 r831 r832 r833 r834 r835 into r836 as validator_datum;\n    ternary r721 true r820 into r837;\n    ternary r720 r44.delegator r828.delegator into r838;\n    ternary r720 r44.validator r828.validator into r839;\n    ternary r720 r44.block_height r828.block_height into r840;\n    ternary r720 r44.bonded_microcredits r828.bonded_microcredits into r841;\n    ternary r720 r44.microcredits_yield_per_epoch r828.microcredits_yield_per_epoch into r842;\n    ternary r720 r44.commission r828.commission into r843;\n    ternary r720 r44.boost r828.boost into r844;\n    cast r838 r839 r840 r841 r842 r843 r844 into r845 as validator_datum;\n    ternary r720 r719.delegator r836.delegator into r846;\n    ternary r720 r719.validator r836.validator into r847;\n    ternary r720 r719.block_height r836.block_height into r848;\n    ternary r720 r719.bonded_microcredits r836.bonded_microcredits into r849;\n    ternary r720 r719.microcredits_yield_per_epoch r836.microcredits_yield_per_epoch into r850;\n    ternary r720 r719.commission r836.commission into r851;\n    ternary r720 r719.boost r836.boost into r852;\n    cast r846 r847 r848 r849 r850 r851 r852 into r853 as validator_datum;\n    ternary r720 true r837 into r854;\n    is.eq r853.delegator r45.delegator into r855;\n    is.eq r853.validator r45.validator into r856;\n    lt r45.block_height r49 into r857;\n    lt r853.block_height r49 into r858;\n    is.eq r45.microcredits_yield_per_epoch 0u128 into r859;\n    is.eq r853.microcredits_yield_per_epoch 0u128 into r860;\n    mul r853.boost 10_000u128 into r861;\n    div r861 r50[6u32] into r862;\n    add r853.microcredits_yield_per_epoch r862 into r863;\n    mul r45.boost 10_000u128 into r864;\n    div r864 r50[6u32] into r865;\n    add r45.microcredits_yield_per_epoch r865 into r866;\n    gt r863 r866 into r867;\n    lt r863 r866 into r868;\n    ternary r856 r867 r868 into r869;\n    ternary r869 r45.delegator r853.delegator into r870;\n    ternary r869 r45.validator r853.validator into r871;\n    ternary r869 r45.block_height r853.block_height into r872;\n    ternary r869 r45.bonded_microcredits r853.bonded_microcredits into r873;\n    ternary r869 r45.microcredits_yield_per_epoch r853.microcredits_yield_per_epoch into r874;\n    ternary r869 r45.commission r853.commission into r875;\n    ternary r869 r45.boost r853.boost into r876;\n    cast r870 r871 r872 r873 r874 r875 r876 into r877 as validator_datum;\n    ternary r869 r853.delegator r45.delegator into r878;\n    ternary r869 r853.validator r45.validator into r879;\n    ternary r869 r853.block_height r45.block_height into r880;\n    ternary r869 r853.bonded_microcredits r45.bonded_microcredits into r881;\n    ternary r869 r853.microcredits_yield_per_epoch r45.microcredits_yield_per_epoch into r882;\n    ternary r869 r853.commission r45.commission into r883;\n    ternary r869 r853.boost r45.boost into r884;\n    cast r878 r879 r880 r881 r882 r883 r884 into r885 as validator_datum;\n    ternary r869 r856 r856 into r886;\n    ternary r860 r45.delegator r877.delegator into r887;\n    ternary r860 r45.validator r877.validator into r888;\n    ternary r860 r45.block_height r877.block_height into r889;\n    ternary r860 r45.bonded_microcredits r877.bonded_microcredits into r890;\n    ternary r860 r45.microcredits_yield_per_epoch r877.microcredits_yield_per_epoch into r891;\n    ternary r860 r45.commission r877.commission into r892;\n    ternary r860 r45.boost r877.boost into r893;\n    cast r887 r888 r889 r890 r891 r892 r893 into r894 as validator_datum;\n    ternary r860 r853.delegator r885.delegator into r895;\n    ternary r860 r853.validator r885.validator into r896;\n    ternary r860 r853.block_height r885.block_height into r897;\n    ternary r860 r853.bonded_microcredits r885.bonded_microcredits into r898;\n    ternary r860 r853.microcredits_yield_per_epoch r885.microcredits_yield_per_epoch into r899;\n    ternary r860 r853.commission r885.commission into r900;\n    ternary r860 r853.boost r885.boost into r901;\n    cast r895 r896 r897 r898 r899 r900 r901 into r902 as validator_datum;\n    ternary r860 r856 r886 into r903;\n    ternary r859 r853.delegator r894.delegator into r904;\n    ternary r859 r853.validator r894.validator into r905;\n    ternary r859 r853.block_height r894.block_height into r906;\n    ternary r859 r853.bonded_microcredits r894.bonded_microcredits into r907;\n    ternary r859 r853.microcredits_yield_per_epoch r894.microcredits_yield_per_epoch into r908;\n    ternary r859 r853.commission r894.commission into r909;\n    ternary r859 r853.boost r894.boost into r910;\n    cast r904 r905 r906 r907 r908 r909 r910 into r911 as validator_datum;\n    ternary r859 r45.delegator r902.delegator into r912;\n    ternary r859 r45.validator r902.validator into r913;\n    ternary r859 r45.block_height r902.block_height into r914;\n    ternary r859 r45.bonded_microcredits r902.bonded_microcredits into r915;\n    ternary r859 r45.microcredits_yield_per_epoch r902.microcredits_yield_per_epoch into r916;\n    ternary r859 r45.commission r902.commission into r917;\n    ternary r859 r45.boost r902.boost into r918;\n    cast r912 r913 r914 r915 r916 r917 r918 into r919 as validator_datum;\n    ternary r859 r856 r903 into r920;\n    ternary r858 r45.delegator r911.delegator into r921;\n    ternary r858 r45.validator r911.validator into r922;\n    ternary r858 r45.block_height r911.block_height into r923;\n    ternary r858 r45.bonded_microcredits r911.bonded_microcredits into r924;\n    ternary r858 r45.microcredits_yield_per_epoch r911.microcredits_yield_per_epoch into r925;\n    ternary r858 r45.commission r911.commission into r926;\n    ternary r858 r45.boost r911.boost into r927;\n    cast r921 r922 r923 r924 r925 r926 r927 into r928 as validator_datum;\n    ternary r858 r853.delegator r919.delegator into r929;\n    ternary r858 r853.validator r919.validator into r930;\n    ternary r858 r853.block_height r919.block_height into r931;\n    ternary r858 r853.bonded_microcredits r919.bonded_microcredits into r932;\n    ternary r858 r853.microcredits_yield_per_epoch r919.microcredits_yield_per_epoch into r933;\n    ternary r858 r853.commission r919.commission into r934;\n    ternary r858 r853.boost r919.boost into r935;\n    cast r929 r930 r931 r932 r933 r934 r935 into r936 as validator_datum;\n    ternary r858 r856 r920 into r937;\n    ternary r857 r853.delegator r928.delegator into r938;\n    ternary r857 r853.validator r928.validator into r939;\n    ternary r857 r853.block_height r928.block_height into r940;\n    ternary r857 r853.bonded_microcredits r928.bonded_microcredits into r941;\n    ternary r857 r853.microcredits_yield_per_epoch r928.microcredits_yield_per_epoch into r942;\n    ternary r857 r853.commission r928.commission into r943;\n    ternary r857 r853.boost r928.boost into r944;\n    cast r938 r939 r940 r941 r942 r943 r944 into r945 as validator_datum;\n    ternary r857 r45.delegator r936.delegator into r946;\n    ternary r857 r45.validator r936.validator into r947;\n    ternary r857 r45.block_height r936.block_height into r948;\n    ternary r857 r45.bonded_microcredits r936.bonded_microcredits into r949;\n    ternary r857 r45.microcredits_yield_per_epoch r936.microcredits_yield_per_epoch into r950;\n    ternary r857 r45.commission r936.commission into r951;\n    ternary r857 r45.boost r936.boost into r952;\n    cast r946 r947 r948 r949 r950 r951 r952 into r953 as validator_datum;\n    ternary r857 r856 r937 into r954;\n    ternary r855 r853.delegator r945.delegator into r955;\n    ternary r855 r853.validator r945.validator into r956;\n    ternary r855 r853.block_height r945.block_height into r957;\n    ternary r855 r853.bonded_microcredits r945.bonded_microcredits into r958;\n    ternary r855 r853.microcredits_yield_per_epoch r945.microcredits_yield_per_epoch into r959;\n    ternary r855 r853.commission r945.commission into r960;\n    ternary r855 r853.boost r945.boost into r961;\n    cast r955 r956 r957 r958 r959 r960 r961 into r962 as validator_datum;\n    ternary r855 r45.delegator r953.delegator into r963;\n    ternary r855 r45.validator r953.validator into r964;\n    ternary r855 r45.block_height r953.block_height into r965;\n    ternary r855 r45.bonded_microcredits r953.bonded_microcredits into r966;\n    ternary r855 r45.microcredits_yield_per_epoch r953.microcredits_yield_per_epoch into r967;\n    ternary r855 r45.commission r953.commission into r968;\n    ternary r855 r45.boost r953.boost into r969;\n    cast r963 r964 r965 r966 r967 r968 r969 into r970 as validator_datum;\n    ternary r855 true r954 into r971;\n    ternary r854 r45.delegator r962.delegator into r972;\n    ternary r854 r45.validator r962.validator into r973;\n    ternary r854 r45.block_height r962.block_height into r974;\n    ternary r854 r45.bonded_microcredits r962.bonded_microcredits into r975;\n    ternary r854 r45.microcredits_yield_per_epoch r962.microcredits_yield_per_epoch into r976;\n    ternary r854 r45.commission r962.commission into r977;\n    ternary r854 r45.boost r962.boost into r978;\n    cast r972 r973 r974 r975 r976 r977 r978 into r979 as validator_datum;\n    ternary r854 r853.delegator r970.delegator into r980;\n    ternary r854 r853.validator r970.validator into r981;\n    ternary r854 r853.block_height r970.block_height into r982;\n    ternary r854 r853.bonded_microcredits r970.bonded_microcredits into r983;\n    ternary r854 r853.microcredits_yield_per_epoch r970.microcredits_yield_per_epoch into r984;\n    ternary r854 r853.commission r970.commission into r985;\n    ternary r854 r853.boost r970.boost into r986;\n    cast r980 r981 r982 r983 r984 r985 r986 into r987 as validator_datum;\n    ternary r854 true r971 into r988;\n    is.eq r987.delegator r46.delegator into r989;\n    is.eq r987.validator r46.validator into r990;\n    lt r46.block_height r49 into r991;\n    lt r987.block_height r49 into r992;\n    is.eq r46.microcredits_yield_per_epoch 0u128 into r993;\n    is.eq r987.microcredits_yield_per_epoch 0u128 into r994;\n    mul r987.boost 10_000u128 into r995;\n    div r995 r50[7u32] into r996;\n    add r987.microcredits_yield_per_epoch r996 into r997;\n    mul r46.boost 10_000u128 into r998;\n    div r998 r50[7u32] into r999;\n    add r46.microcredits_yield_per_epoch r999 into r1000;\n    gt r997 r1000 into r1001;\n    lt r997 r1000 into r1002;\n    ternary r990 r1001 r1002 into r1003;\n    ternary r1003 r46.delegator r987.delegator into r1004;\n    ternary r1003 r46.validator r987.validator into r1005;\n    ternary r1003 r46.block_height r987.block_height into r1006;\n    ternary r1003 r46.bonded_microcredits r987.bonded_microcredits into r1007;\n    ternary r1003 r46.microcredits_yield_per_epoch r987.microcredits_yield_per_epoch into r1008;\n    ternary r1003 r46.commission r987.commission into r1009;\n    ternary r1003 r46.boost r987.boost into r1010;\n    cast r1004 r1005 r1006 r1007 r1008 r1009 r1010 into r1011 as validator_datum;\n    ternary r1003 r987.delegator r46.delegator into r1012;\n    ternary r1003 r987.validator r46.validator into r1013;\n    ternary r1003 r987.block_height r46.block_height into r1014;\n    ternary r1003 r987.bonded_microcredits r46.bonded_microcredits into r1015;\n    ternary r1003 r987.microcredits_yield_per_epoch r46.microcredits_yield_per_epoch into r1016;\n    ternary r1003 r987.commission r46.commission into r1017;\n    ternary r1003 r987.boost r46.boost into r1018;\n    cast r1012 r1013 r1014 r1015 r1016 r1017 r1018 into r1019 as validator_datum;\n    ternary r1003 r990 r990 into r1020;\n    ternary r994 r46.delegator r1011.delegator into r1021;\n    ternary r994 r46.validator r1011.validator into r1022;\n    ternary r994 r46.block_height r1011.block_height into r1023;\n    ternary r994 r46.bonded_microcredits r1011.bonded_microcredits into r1024;\n    ternary r994 r46.microcredits_yield_per_epoch r1011.microcredits_yield_per_epoch into r1025;\n    ternary r994 r46.commission r1011.commission into r1026;\n    ternary r994 r46.boost r1011.boost into r1027;\n    cast r1021 r1022 r1023 r1024 r1025 r1026 r1027 into r1028 as validator_datum;\n    ternary r994 r987.delegator r1019.delegator into r1029;\n    ternary r994 r987.validator r1019.validator into r1030;\n    ternary r994 r987.block_height r1019.block_height into r1031;\n    ternary r994 r987.bonded_microcredits r1019.bonded_microcredits into r1032;\n    ternary r994 r987.microcredits_yield_per_epoch r1019.microcredits_yield_per_epoch into r1033;\n    ternary r994 r987.commission r1019.commission into r1034;\n    ternary r994 r987.boost r1019.boost into r1035;\n    cast r1029 r1030 r1031 r1032 r1033 r1034 r1035 into r1036 as validator_datum;\n    ternary r994 r990 r1020 into r1037;\n    ternary r993 r987.delegator r1028.delegator into r1038;\n    ternary r993 r987.validator r1028.validator into r1039;\n    ternary r993 r987.block_height r1028.block_height into r1040;\n    ternary r993 r987.bonded_microcredits r1028.bonded_microcredits into r1041;\n    ternary r993 r987.microcredits_yield_per_epoch r1028.microcredits_yield_per_epoch into r1042;\n    ternary r993 r987.commission r1028.commission into r1043;\n    ternary r993 r987.boost r1028.boost into r1044;\n    cast r1038 r1039 r1040 r1041 r1042 r1043 r1044 into r1045 as validator_datum;\n    ternary r993 r46.delegator r1036.delegator into r1046;\n    ternary r993 r46.validator r1036.validator into r1047;\n    ternary r993 r46.block_height r1036.block_height into r1048;\n    ternary r993 r46.bonded_microcredits r1036.bonded_microcredits into r1049;\n    ternary r993 r46.microcredits_yield_per_epoch r1036.microcredits_yield_per_epoch into r1050;\n    ternary r993 r46.commission r1036.commission into r1051;\n    ternary r993 r46.boost r1036.boost into r1052;\n    cast r1046 r1047 r1048 r1049 r1050 r1051 r1052 into r1053 as validator_datum;\n    ternary r993 r990 r1037 into r1054;\n    ternary r992 r46.delegator r1045.delegator into r1055;\n    ternary r992 r46.validator r1045.validator into r1056;\n    ternary r992 r46.block_height r1045.block_height into r1057;\n    ternary r992 r46.bonded_microcredits r1045.bonded_microcredits into r1058;\n    ternary r992 r46.microcredits_yield_per_epoch r1045.microcredits_yield_per_epoch into r1059;\n    ternary r992 r46.commission r1045.commission into r1060;\n    ternary r992 r46.boost r1045.boost into r1061;\n    cast r1055 r1056 r1057 r1058 r1059 r1060 r1061 into r1062 as validator_datum;\n    ternary r992 r987.delegator r1053.delegator into r1063;\n    ternary r992 r987.validator r1053.validator into r1064;\n    ternary r992 r987.block_height r1053.block_height into r1065;\n    ternary r992 r987.bonded_microcredits r1053.bonded_microcredits into r1066;\n    ternary r992 r987.microcredits_yield_per_epoch r1053.microcredits_yield_per_epoch into r1067;\n    ternary r992 r987.commission r1053.commission into r1068;\n    ternary r992 r987.boost r1053.boost into r1069;\n    cast r1063 r1064 r1065 r1066 r1067 r1068 r1069 into r1070 as validator_datum;\n    ternary r992 r990 r1054 into r1071;\n    ternary r991 r987.delegator r1062.delegator into r1072;\n    ternary r991 r987.validator r1062.validator into r1073;\n    ternary r991 r987.block_height r1062.block_height into r1074;\n    ternary r991 r987.bonded_microcredits r1062.bonded_microcredits into r1075;\n    ternary r991 r987.microcredits_yield_per_epoch r1062.microcredits_yield_per_epoch into r1076;\n    ternary r991 r987.commission r1062.commission into r1077;\n    ternary r991 r987.boost r1062.boost into r1078;\n    cast r1072 r1073 r1074 r1075 r1076 r1077 r1078 into r1079 as validator_datum;\n    ternary r991 r46.delegator r1070.delegator into r1080;\n    ternary r991 r46.validator r1070.validator into r1081;\n    ternary r991 r46.block_height r1070.block_height into r1082;\n    ternary r991 r46.bonded_microcredits r1070.bonded_microcredits into r1083;\n    ternary r991 r46.microcredits_yield_per_epoch r1070.microcredits_yield_per_epoch into r1084;\n    ternary r991 r46.commission r1070.commission into r1085;\n    ternary r991 r46.boost r1070.boost into r1086;\n    cast r1080 r1081 r1082 r1083 r1084 r1085 r1086 into r1087 as validator_datum;\n    ternary r991 r990 r1071 into r1088;\n    ternary r989 r987.delegator r1079.delegator into r1089;\n    ternary r989 r987.validator r1079.validator into r1090;\n    ternary r989 r987.block_height r1079.block_height into r1091;\n    ternary r989 r987.bonded_microcredits r1079.bonded_microcredits into r1092;\n    ternary r989 r987.microcredits_yield_per_epoch r1079.microcredits_yield_per_epoch into r1093;\n    ternary r989 r987.commission r1079.commission into r1094;\n    ternary r989 r987.boost r1079.boost into r1095;\n    cast r1089 r1090 r1091 r1092 r1093 r1094 r1095 into r1096 as validator_datum;\n    ternary r989 r46.delegator r1087.delegator into r1097;\n    ternary r989 r46.validator r1087.validator into r1098;\n    ternary r989 r46.block_height r1087.block_height into r1099;\n    ternary r989 r46.bonded_microcredits r1087.bonded_microcredits into r1100;\n    ternary r989 r46.microcredits_yield_per_epoch r1087.microcredits_yield_per_epoch into r1101;\n    ternary r989 r46.commission r1087.commission into r1102;\n    ternary r989 r46.boost r1087.boost into r1103;\n    cast r1097 r1098 r1099 r1100 r1101 r1102 r1103 into r1104 as validator_datum;\n    ternary r989 true r1088 into r1105;\n    ternary r988 r46.delegator r1096.delegator into r1106;\n    ternary r988 r46.validator r1096.validator into r1107;\n    ternary r988 r46.block_height r1096.block_height into r1108;\n    ternary r988 r46.bonded_microcredits r1096.bonded_microcredits into r1109;\n    ternary r988 r46.microcredits_yield_per_epoch r1096.microcredits_yield_per_epoch into r1110;\n    ternary r988 r46.commission r1096.commission into r1111;\n    ternary r988 r46.boost r1096.boost into r1112;\n    cast r1106 r1107 r1108 r1109 r1110 r1111 r1112 into r1113 as validator_datum;\n    ternary r988 r987.delegator r1104.delegator into r1114;\n    ternary r988 r987.validator r1104.validator into r1115;\n    ternary r988 r987.block_height r1104.block_height into r1116;\n    ternary r988 r987.bonded_microcredits r1104.bonded_microcredits into r1117;\n    ternary r988 r987.microcredits_yield_per_epoch r1104.microcredits_yield_per_epoch into r1118;\n    ternary r988 r987.commission r1104.commission into r1119;\n    ternary r988 r987.boost r1104.boost into r1120;\n    cast r1114 r1115 r1116 r1117 r1118 r1119 r1120 into r1121 as validator_datum;\n    ternary r988 true r1105 into r1122;\n    is.eq r1121.delegator r47.delegator into r1123;\n    is.eq r1121.validator r47.validator into r1124;\n    lt r47.block_height r49 into r1125;\n    lt r1121.block_height r49 into r1126;\n    is.eq r47.microcredits_yield_per_epoch 0u128 into r1127;\n    is.eq r1121.microcredits_yield_per_epoch 0u128 into r1128;\n    mul r1121.boost 10_000u128 into r1129;\n    div r1129 r50[8u32] into r1130;\n    add r1121.microcredits_yield_per_epoch r1130 into r1131;\n    mul r47.boost 10_000u128 into r1132;\n    div r1132 r50[8u32] into r1133;\n    add r47.microcredits_yield_per_epoch r1133 into r1134;\n    gt r1131 r1134 into r1135;\n    lt r1131 r1134 into r1136;\n    ternary r1124 r1135 r1136 into r1137;\n    ternary r1137 r47.delegator r1121.delegator into r1138;\n    ternary r1137 r47.validator r1121.validator into r1139;\n    ternary r1137 r47.block_height r1121.block_height into r1140;\n    ternary r1137 r47.bonded_microcredits r1121.bonded_microcredits into r1141;\n    ternary r1137 r47.microcredits_yield_per_epoch r1121.microcredits_yield_per_epoch into r1142;\n    ternary r1137 r47.commission r1121.commission into r1143;\n    ternary r1137 r47.boost r1121.boost into r1144;\n    cast r1138 r1139 r1140 r1141 r1142 r1143 r1144 into r1145 as validator_datum;\n    ternary r1137 r1121.delegator r47.delegator into r1146;\n    ternary r1137 r1121.validator r47.validator into r1147;\n    ternary r1137 r1121.block_height r47.block_height into r1148;\n    ternary r1137 r1121.bonded_microcredits r47.bonded_microcredits into r1149;\n    ternary r1137 r1121.microcredits_yield_per_epoch r47.microcredits_yield_per_epoch into r1150;\n    ternary r1137 r1121.commission r47.commission into r1151;\n    ternary r1137 r1121.boost r47.boost into r1152;\n    cast r1146 r1147 r1148 r1149 r1150 r1151 r1152 into r1153 as validator_datum;\n    ternary r1137 r1124 r1124 into r1154;\n    ternary r1128 r47.delegator r1145.delegator into r1155;\n    ternary r1128 r47.validator r1145.validator into r1156;\n    ternary r1128 r47.block_height r1145.block_height into r1157;\n    ternary r1128 r47.bonded_microcredits r1145.bonded_microcredits into r1158;\n    ternary r1128 r47.microcredits_yield_per_epoch r1145.microcredits_yield_per_epoch into r1159;\n    ternary r1128 r47.commission r1145.commission into r1160;\n    ternary r1128 r47.boost r1145.boost into r1161;\n    cast r1155 r1156 r1157 r1158 r1159 r1160 r1161 into r1162 as validator_datum;\n    ternary r1128 r1121.delegator r1153.delegator into r1163;\n    ternary r1128 r1121.validator r1153.validator into r1164;\n    ternary r1128 r1121.block_height r1153.block_height into r1165;\n    ternary r1128 r1121.bonded_microcredits r1153.bonded_microcredits into r1166;\n    ternary r1128 r1121.microcredits_yield_per_epoch r1153.microcredits_yield_per_epoch into r1167;\n    ternary r1128 r1121.commission r1153.commission into r1168;\n    ternary r1128 r1121.boost r1153.boost into r1169;\n    cast r1163 r1164 r1165 r1166 r1167 r1168 r1169 into r1170 as validator_datum;\n    ternary r1128 r1124 r1154 into r1171;\n    ternary r1127 r1121.delegator r1162.delegator into r1172;\n    ternary r1127 r1121.validator r1162.validator into r1173;\n    ternary r1127 r1121.block_height r1162.block_height into r1174;\n    ternary r1127 r1121.bonded_microcredits r1162.bonded_microcredits into r1175;\n    ternary r1127 r1121.microcredits_yield_per_epoch r1162.microcredits_yield_per_epoch into r1176;\n    ternary r1127 r1121.commission r1162.commission into r1177;\n    ternary r1127 r1121.boost r1162.boost into r1178;\n    cast r1172 r1173 r1174 r1175 r1176 r1177 r1178 into r1179 as validator_datum;\n    ternary r1127 r47.delegator r1170.delegator into r1180;\n    ternary r1127 r47.validator r1170.validator into r1181;\n    ternary r1127 r47.block_height r1170.block_height into r1182;\n    ternary r1127 r47.bonded_microcredits r1170.bonded_microcredits into r1183;\n    ternary r1127 r47.microcredits_yield_per_epoch r1170.microcredits_yield_per_epoch into r1184;\n    ternary r1127 r47.commission r1170.commission into r1185;\n    ternary r1127 r47.boost r1170.boost into r1186;\n    cast r1180 r1181 r1182 r1183 r1184 r1185 r1186 into r1187 as validator_datum;\n    ternary r1127 r1124 r1171 into r1188;\n    ternary r1126 r47.delegator r1179.delegator into r1189;\n    ternary r1126 r47.validator r1179.validator into r1190;\n    ternary r1126 r47.block_height r1179.block_height into r1191;\n    ternary r1126 r47.bonded_microcredits r1179.bonded_microcredits into r1192;\n    ternary r1126 r47.microcredits_yield_per_epoch r1179.microcredits_yield_per_epoch into r1193;\n    ternary r1126 r47.commission r1179.commission into r1194;\n    ternary r1126 r47.boost r1179.boost into r1195;\n    cast r1189 r1190 r1191 r1192 r1193 r1194 r1195 into r1196 as validator_datum;\n    ternary r1126 r1121.delegator r1187.delegator into r1197;\n    ternary r1126 r1121.validator r1187.validator into r1198;\n    ternary r1126 r1121.block_height r1187.block_height into r1199;\n    ternary r1126 r1121.bonded_microcredits r1187.bonded_microcredits into r1200;\n    ternary r1126 r1121.microcredits_yield_per_epoch r1187.microcredits_yield_per_epoch into r1201;\n    ternary r1126 r1121.commission r1187.commission into r1202;\n    ternary r1126 r1121.boost r1187.boost into r1203;\n    cast r1197 r1198 r1199 r1200 r1201 r1202 r1203 into r1204 as validator_datum;\n    ternary r1126 r1124 r1188 into r1205;\n    ternary r1125 r1121.delegator r1196.delegator into r1206;\n    ternary r1125 r1121.validator r1196.validator into r1207;\n    ternary r1125 r1121.block_height r1196.block_height into r1208;\n    ternary r1125 r1121.bonded_microcredits r1196.bonded_microcredits into r1209;\n    ternary r1125 r1121.microcredits_yield_per_epoch r1196.microcredits_yield_per_epoch into r1210;\n    ternary r1125 r1121.commission r1196.commission into r1211;\n    ternary r1125 r1121.boost r1196.boost into r1212;\n    cast r1206 r1207 r1208 r1209 r1210 r1211 r1212 into r1213 as validator_datum;\n    ternary r1125 r47.delegator r1204.delegator into r1214;\n    ternary r1125 r47.validator r1204.validator into r1215;\n    ternary r1125 r47.block_height r1204.block_height into r1216;\n    ternary r1125 r47.bonded_microcredits r1204.bonded_microcredits into r1217;\n    ternary r1125 r47.microcredits_yield_per_epoch r1204.microcredits_yield_per_epoch into r1218;\n    ternary r1125 r47.commission r1204.commission into r1219;\n    ternary r1125 r47.boost r1204.boost into r1220;\n    cast r1214 r1215 r1216 r1217 r1218 r1219 r1220 into r1221 as validator_datum;\n    ternary r1125 r1124 r1205 into r1222;\n    ternary r1123 r1121.delegator r1213.delegator into r1223;\n    ternary r1123 r1121.validator r1213.validator into r1224;\n    ternary r1123 r1121.block_height r1213.block_height into r1225;\n    ternary r1123 r1121.bonded_microcredits r1213.bonded_microcredits into r1226;\n    ternary r1123 r1121.microcredits_yield_per_epoch r1213.microcredits_yield_per_epoch into r1227;\n    ternary r1123 r1121.commission r1213.commission into r1228;\n    ternary r1123 r1121.boost r1213.boost into r1229;\n    cast r1223 r1224 r1225 r1226 r1227 r1228 r1229 into r1230 as validator_datum;\n    ternary r1123 r47.delegator r1221.delegator into r1231;\n    ternary r1123 r47.validator r1221.validator into r1232;\n    ternary r1123 r47.block_height r1221.block_height into r1233;\n    ternary r1123 r47.bonded_microcredits r1221.bonded_microcredits into r1234;\n    ternary r1123 r47.microcredits_yield_per_epoch r1221.microcredits_yield_per_epoch into r1235;\n    ternary r1123 r47.commission r1221.commission into r1236;\n    ternary r1123 r47.boost r1221.boost into r1237;\n    cast r1231 r1232 r1233 r1234 r1235 r1236 r1237 into r1238 as validator_datum;\n    ternary r1123 true r1222 into r1239;\n    ternary r1122 r47.delegator r1230.delegator into r1240;\n    ternary r1122 r47.validator r1230.validator into r1241;\n    ternary r1122 r47.block_height r1230.block_height into r1242;\n    ternary r1122 r47.bonded_microcredits r1230.bonded_microcredits into r1243;\n    ternary r1122 r47.microcredits_yield_per_epoch r1230.microcredits_yield_per_epoch into r1244;\n    ternary r1122 r47.commission r1230.commission into r1245;\n    ternary r1122 r47.boost r1230.boost into r1246;\n    cast r1240 r1241 r1242 r1243 r1244 r1245 r1246 into r1247 as validator_datum;\n    ternary r1122 r1121.delegator r1238.delegator into r1248;\n    ternary r1122 r1121.validator r1238.validator into r1249;\n    ternary r1122 r1121.block_height r1238.block_height into r1250;\n    ternary r1122 r1121.bonded_microcredits r1238.bonded_microcredits into r1251;\n    ternary r1122 r1121.microcredits_yield_per_epoch r1238.microcredits_yield_per_epoch into r1252;\n    ternary r1122 r1121.commission r1238.commission into r1253;\n    ternary r1122 r1121.boost r1238.boost into r1254;\n    cast r1248 r1249 r1250 r1251 r1252 r1253 r1254 into r1255 as validator_datum;\n    ternary r1122 true r1239 into r1256;\n    is.eq r1255.delegator r48.delegator into r1257;\n    is.eq r1255.validator r48.validator into r1258;\n    lt r48.block_height r49 into r1259;\n    lt r1255.block_height r49 into r1260;\n    is.eq r48.microcredits_yield_per_epoch 0u128 into r1261;\n    is.eq r1255.microcredits_yield_per_epoch 0u128 into r1262;\n    mul r1255.boost 10_000u128 into r1263;\n    div r1263 r50[9u32] into r1264;\n    add r1255.microcredits_yield_per_epoch r1264 into r1265;\n    mul r48.boost 10_000u128 into r1266;\n    div r1266 r50[9u32] into r1267;\n    add r48.microcredits_yield_per_epoch r1267 into r1268;\n    gt r1265 r1268 into r1269;\n    lt r1265 r1268 into r1270;\n    ternary r1258 r1269 r1270 into r1271;\n    ternary r1271 r48.delegator r1255.delegator into r1272;\n    ternary r1271 r48.validator r1255.validator into r1273;\n    ternary r1271 r48.block_height r1255.block_height into r1274;\n    ternary r1271 r48.bonded_microcredits r1255.bonded_microcredits into r1275;\n    ternary r1271 r48.microcredits_yield_per_epoch r1255.microcredits_yield_per_epoch into r1276;\n    ternary r1271 r48.commission r1255.commission into r1277;\n    ternary r1271 r48.boost r1255.boost into r1278;\n    cast r1272 r1273 r1274 r1275 r1276 r1277 r1278 into r1279 as validator_datum;\n    ternary r1271 r1255.delegator r48.delegator into r1280;\n    ternary r1271 r1255.validator r48.validator into r1281;\n    ternary r1271 r1255.block_height r48.block_height into r1282;\n    ternary r1271 r1255.bonded_microcredits r48.bonded_microcredits into r1283;\n    ternary r1271 r1255.microcredits_yield_per_epoch r48.microcredits_yield_per_epoch into r1284;\n    ternary r1271 r1255.commission r48.commission into r1285;\n    ternary r1271 r1255.boost r48.boost into r1286;\n    cast r1280 r1281 r1282 r1283 r1284 r1285 r1286 into r1287 as validator_datum;\n    ternary r1271 r1258 r1258 into r1288;\n    ternary r1262 r48.delegator r1279.delegator into r1289;\n    ternary r1262 r48.validator r1279.validator into r1290;\n    ternary r1262 r48.block_height r1279.block_height into r1291;\n    ternary r1262 r48.bonded_microcredits r1279.bonded_microcredits into r1292;\n    ternary r1262 r48.microcredits_yield_per_epoch r1279.microcredits_yield_per_epoch into r1293;\n    ternary r1262 r48.commission r1279.commission into r1294;\n    ternary r1262 r48.boost r1279.boost into r1295;\n    cast r1289 r1290 r1291 r1292 r1293 r1294 r1295 into r1296 as validator_datum;\n    ternary r1262 r1255.delegator r1287.delegator into r1297;\n    ternary r1262 r1255.validator r1287.validator into r1298;\n    ternary r1262 r1255.block_height r1287.block_height into r1299;\n    ternary r1262 r1255.bonded_microcredits r1287.bonded_microcredits into r1300;\n    ternary r1262 r1255.microcredits_yield_per_epoch r1287.microcredits_yield_per_epoch into r1301;\n    ternary r1262 r1255.commission r1287.commission into r1302;\n    ternary r1262 r1255.boost r1287.boost into r1303;\n    cast r1297 r1298 r1299 r1300 r1301 r1302 r1303 into r1304 as validator_datum;\n    ternary r1262 r1258 r1288 into r1305;\n    ternary r1261 r1255.delegator r1296.delegator into r1306;\n    ternary r1261 r1255.validator r1296.validator into r1307;\n    ternary r1261 r1255.block_height r1296.block_height into r1308;\n    ternary r1261 r1255.bonded_microcredits r1296.bonded_microcredits into r1309;\n    ternary r1261 r1255.microcredits_yield_per_epoch r1296.microcredits_yield_per_epoch into r1310;\n    ternary r1261 r1255.commission r1296.commission into r1311;\n    ternary r1261 r1255.boost r1296.boost into r1312;\n    cast r1306 r1307 r1308 r1309 r1310 r1311 r1312 into r1313 as validator_datum;\n    ternary r1261 r48.delegator r1304.delegator into r1314;\n    ternary r1261 r48.validator r1304.validator into r1315;\n    ternary r1261 r48.block_height r1304.block_height into r1316;\n    ternary r1261 r48.bonded_microcredits r1304.bonded_microcredits into r1317;\n    ternary r1261 r48.microcredits_yield_per_epoch r1304.microcredits_yield_per_epoch into r1318;\n    ternary r1261 r48.commission r1304.commission into r1319;\n    ternary r1261 r48.boost r1304.boost into r1320;\n    cast r1314 r1315 r1316 r1317 r1318 r1319 r1320 into r1321 as validator_datum;\n    ternary r1261 r1258 r1305 into r1322;\n    ternary r1260 r48.delegator r1313.delegator into r1323;\n    ternary r1260 r48.validator r1313.validator into r1324;\n    ternary r1260 r48.block_height r1313.block_height into r1325;\n    ternary r1260 r48.bonded_microcredits r1313.bonded_microcredits into r1326;\n    ternary r1260 r48.microcredits_yield_per_epoch r1313.microcredits_yield_per_epoch into r1327;\n    ternary r1260 r48.commission r1313.commission into r1328;\n    ternary r1260 r48.boost r1313.boost into r1329;\n    cast r1323 r1324 r1325 r1326 r1327 r1328 r1329 into r1330 as validator_datum;\n    ternary r1260 r1255.delegator r1321.delegator into r1331;\n    ternary r1260 r1255.validator r1321.validator into r1332;\n    ternary r1260 r1255.block_height r1321.block_height into r1333;\n    ternary r1260 r1255.bonded_microcredits r1321.bonded_microcredits into r1334;\n    ternary r1260 r1255.microcredits_yield_per_epoch r1321.microcredits_yield_per_epoch into r1335;\n    ternary r1260 r1255.commission r1321.commission into r1336;\n    ternary r1260 r1255.boost r1321.boost into r1337;\n    cast r1331 r1332 r1333 r1334 r1335 r1336 r1337 into r1338 as validator_datum;\n    ternary r1260 r1258 r1322 into r1339;\n    ternary r1259 r1255.delegator r1330.delegator into r1340;\n    ternary r1259 r1255.validator r1330.validator into r1341;\n    ternary r1259 r1255.block_height r1330.block_height into r1342;\n    ternary r1259 r1255.bonded_microcredits r1330.bonded_microcredits into r1343;\n    ternary r1259 r1255.microcredits_yield_per_epoch r1330.microcredits_yield_per_epoch into r1344;\n    ternary r1259 r1255.commission r1330.commission into r1345;\n    ternary r1259 r1255.boost r1330.boost into r1346;\n    cast r1340 r1341 r1342 r1343 r1344 r1345 r1346 into r1347 as validator_datum;\n    ternary r1259 r48.delegator r1338.delegator into r1348;\n    ternary r1259 r48.validator r1338.validator into r1349;\n    ternary r1259 r48.block_height r1338.block_height into r1350;\n    ternary r1259 r48.bonded_microcredits r1338.bonded_microcredits into r1351;\n    ternary r1259 r48.microcredits_yield_per_epoch r1338.microcredits_yield_per_epoch into r1352;\n    ternary r1259 r48.commission r1338.commission into r1353;\n    ternary r1259 r48.boost r1338.boost into r1354;\n    cast r1348 r1349 r1350 r1351 r1352 r1353 r1354 into r1355 as validator_datum;\n    ternary r1259 r1258 r1339 into r1356;\n    ternary r1257 r1255.delegator r1347.delegator into r1357;\n    ternary r1257 r1255.validator r1347.validator into r1358;\n    ternary r1257 r1255.block_height r1347.block_height into r1359;\n    ternary r1257 r1255.bonded_microcredits r1347.bonded_microcredits into r1360;\n    ternary r1257 r1255.microcredits_yield_per_epoch r1347.microcredits_yield_per_epoch into r1361;\n    ternary r1257 r1255.commission r1347.commission into r1362;\n    ternary r1257 r1255.boost r1347.boost into r1363;\n    cast r1357 r1358 r1359 r1360 r1361 r1362 r1363 into r1364 as validator_datum;\n    ternary r1257 r48.delegator r1355.delegator into r1365;\n    ternary r1257 r48.validator r1355.validator into r1366;\n    ternary r1257 r48.block_height r1355.block_height into r1367;\n    ternary r1257 r48.bonded_microcredits r1355.bonded_microcredits into r1368;\n    ternary r1257 r48.microcredits_yield_per_epoch r1355.microcredits_yield_per_epoch into r1369;\n    ternary r1257 r48.commission r1355.commission into r1370;\n    ternary r1257 r48.boost r1355.boost into r1371;\n    cast r1365 r1366 r1367 r1368 r1369 r1370 r1371 into r1372 as validator_datum;\n    ternary r1257 true r1356 into r1373;\n    ternary r1256 r48.delegator r1364.delegator into r1374;\n    ternary r1256 r48.validator r1364.validator into r1375;\n    ternary r1256 r48.block_height r1364.block_height into r1376;\n    ternary r1256 r48.bonded_microcredits r1364.bonded_microcredits into r1377;\n    ternary r1256 r48.microcredits_yield_per_epoch r1364.microcredits_yield_per_epoch into r1378;\n    ternary r1256 r48.commission r1364.commission into r1379;\n    ternary r1256 r48.boost r1364.boost into r1380;\n    cast r1374 r1375 r1376 r1377 r1378 r1379 r1380 into r1381 as validator_datum;\n    ternary r1256 r1255.delegator r1372.delegator into r1382;\n    ternary r1256 r1255.validator r1372.validator into r1383;\n    ternary r1256 r1255.block_height r1372.block_height into r1384;\n    ternary r1256 r1255.bonded_microcredits r1372.bonded_microcredits into r1385;\n    ternary r1256 r1255.microcredits_yield_per_epoch r1372.microcredits_yield_per_epoch into r1386;\n    ternary r1256 r1255.commission r1372.commission into r1387;\n    ternary r1256 r1255.boost r1372.boost into r1388;\n    cast r1382 r1383 r1384 r1385 r1386 r1387 r1388 into r1389 as validator_datum;\n    ternary r1256 true r1373 into r1390;\n    cast  r175.delegator r309.delegator r443.delegator r577.delegator r711.delegator r845.delegator r979.delegator r1113.delegator r1247.delegator r1381.delegator into r1391 as [address; 10u32];\n    set r1391 into top_validators[0u8];\n\n\n\n\n\n\nfunction remove_delegator:\n    async remove_delegator self.caller into r0;\n    output r0 as pondo_oracle.aleo/remove_delegator.future;\n\nfinalize remove_delegator:\n    input r0 as address.public;\n    rem block.height 120_960u32 into r1;\n    lt r1 103_680u32 into r2;\n    assert.eq r2 true;\n    contains delegator_to_validator[r0] into r3;\n    branch.eq r3 false to end_then_0_0;\n    remove delegator_to_validator[r0];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    contains validator_data[r0] into r4;\n    branch.eq r4 false to end_then_0_2;\n    remove validator_data[r0];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n    get top_validators[0u8] into r5;\n    is.eq r5[0u32] r0 into r6;\n    ternary r6 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[0u32] into r7;\n    is.eq r5[1u32] r0 into r8;\n    ternary r8 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[1u32] into r9;\n    is.eq r5[2u32] r0 into r10;\n    ternary r10 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[2u32] into r11;\n    is.eq r5[3u32] r0 into r12;\n    ternary r12 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[3u32] into r13;\n    is.eq r5[4u32] r0 into r14;\n    ternary r14 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[4u32] into r15;\n    is.eq r5[5u32] r0 into r16;\n    ternary r16 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[5u32] into r17;\n    is.eq r5[6u32] r0 into r18;\n    ternary r18 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[6u32] into r19;\n    is.eq r5[7u32] r0 into r20;\n    ternary r20 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[7u32] into r21;\n    is.eq r5[8u32] r0 into r22;\n    ternary r22 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[8u32] into r23;\n    is.eq r5[9u32] r0 into r24;\n    ternary r24 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[9u32] into r25;\n    is.eq r7 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r26;\n    ternary r26 r9 r7 into r27;\n    ternary r26 r7 r9 into r28;\n    is.eq r28 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r29;\n    ternary r29 r11 r28 into r30;\n    ternary r29 r28 r11 into r31;\n    is.eq r31 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r32;\n    ternary r32 r13 r31 into r33;\n    ternary r32 r31 r13 into r34;\n    is.eq r34 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r35;\n    ternary r35 r15 r34 into r36;\n    ternary r35 r34 r15 into r37;\n    is.eq r37 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r38;\n    ternary r38 r17 r37 into r39;\n    ternary r38 r37 r17 into r40;\n    is.eq r40 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r41;\n    ternary r41 r19 r40 into r42;\n    ternary r41 r40 r19 into r43;\n    is.eq r43 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r44;\n    ternary r44 r21 r43 into r45;\n    ternary r44 r43 r21 into r46;\n    is.eq r46 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r47;\n    ternary r47 r23 r46 into r48;\n    ternary r47 r46 r23 into r49;\n    is.eq r49 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r50;\n    ternary r50 r25 r49 into r51;\n    ternary r50 r49 r25 into r52;\n    cast  r27 r30 r33 r36 r39 r42 r45 r48 r51 r52 into r53 as [address; 10u32];\n    set r53 into top_validators[0u8];\n\n\n\n\nfunction pondo_ban_validator:\n    input r0 as address.public;\n    assert.neq r0 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;\n    assert.neq r0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0;\n    async pondo_ban_validator r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n\nfinalize pondo_ban_validator:\n    input r0 as address.public;\n    input r1 as address.public;\n    contains control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set true into banned_validators[r0];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    async ban_validator r0 into r1;\n    output r1 as pondo_oracle.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    get delegator_to_validator[r0] into r1;\n    rem block.height 120_960u32 into r2;\n    gte r2 103_680u32 into r3;\n    assert.eq r3 true;\n    add 50u8 1u8 into r4;\n    cast false r4 into r5 as committee_state;\n    get.or_use credits.aleo/committee[r1] r5 into r6;\n    not r6.is_open into r7;\n    gt r6.commission 50u8 into r8;\n    or r7 r8 into r9;\n    assert.eq r9 true;\n    set true into banned_validators[r1];\n\n\n\n\nfunction set_pondo_tvl:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async set_pondo_tvl r0 into r1;\n    output r1 as pondo_oracle.aleo/set_pondo_tvl.future;\n\nfinalize set_pondo_tvl:\n    input r0 as u64.public;\n    set r0 into pondo_tvl[0u8];\n\n\n\n\nfunction ban_self:\n    input r0 as address.private;\n    async ban_self r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/ban_self.future;\n\nfinalize ban_self:\n    input r0 as address.public;\n    input r1 as address.public;\n    get credits.aleo/withdraw[r0] into r2;\n    assert.eq r2 r1;\n    contains credits.aleo/committee[r0] into r3;\n    assert.eq r3 true;\n    set true into banned_validators[r0];\n\n\n\n\nfunction boost_validator:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocol.aleo r1 into r2;\n    async boost_validator r2 r0 r1 into r3;\n    output r3 as pondo_oracle.aleo/boost_validator.future;\n\nfinalize boost_validator:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as address.public;\n    input r2 as u64.public;\n    await r0;\n    div block.height 120_960u32 into r3;\n    rem block.height 120_960u32 into r4;\n    gte r4 103_680u32 into r5;\n    not r5 into r6;\n    assert.eq r6 true;\n    cast 0u32 0u64 into r7 as validator_boost;\n    get.or_use validator_boosting[r1] r7 into r8;\n    is.eq r8.epoch r3 into r9;\n    add r8.boost_amount r2 into r10;\n    ternary r9 r10 r2 into r11;\n    cast r3 r11 into r12 as validator_boost;\n    set r12 into validator_boosting[r1];\n\n",
  "pondo_staked_aleo_token.aleo": "import credits.aleo;\nimport multi_token_support_program_v1.aleo;\nprogram pondo_staked_aleo_token.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\n\n\nfunction register_token:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call multi_token_support_program_v1.aleo/register_token 1751493913335802797273486270793650302076377624243810059080883537084141842600field 1631421259099656974472467909989204u128 482131854671u128 6u8 1_000_000_000_000_000u128 false pondo_staked_aleo_token.aleo into r0;\n    async register_token r0 into r1;\n    output r1 as pondo_staked_aleo_token.aleo/register_token.future;\n\nfinalize register_token:\n    input r0 as multi_token_support_program_v1.aleo/register_token.future;\n    await r0;\n\n\n\n\nfunction mint_public:\n    input r0 as u64.public;\n    input r1 as address.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    cast r0 into r2 as u128;\n    call multi_token_support_program_v1.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field r1 r2 4294967295u32 into r3;\n    async mint_public r3 into r4;\n    output r4 as pondo_staked_aleo_token.aleo/mint_public.future;\n\nfinalize mint_public:\n    input r0 as multi_token_support_program_v1.aleo/mint_public.future;\n    await r0;\n\n\n\n\nfunction burn_public:\n    input r0 as u64.public;\n    input r1 as address.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    cast r0 into r2 as u128;\n    call multi_token_support_program_v1.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field r1 r2 into r3;\n    async burn_public r3 into r4;\n    output r4 as pondo_staked_aleo_token.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as multi_token_support_program_v1.aleo/burn_public.future;\n    await r0;\n\n",
  "pondo_token.aleo": "import credits.aleo;\nimport multi_token_support_program_v1.aleo;\nprogram pondo_token.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\nstruct Balance:\n    token_id as field;\n    account as address;\n    balance as u128;\n    authorized_until as u32;\n\n\n\n\nfunction burn_public:\n    input r0 as address.public;\n    input r1 as u128.public;\n    input r2 as u128.public;\n    gt r1 0u128 into r3;\n    assert.eq r3 true;\n    gt r2 0u128 into r4;\n    assert.eq r4 true;\n    is.eq self.signer r0 into r5;\n    is.eq self.caller r0 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    call multi_token_support_program_v1.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842601field r0 r1 into r8;\n    call multi_token_support_program_v1.aleo/transfer_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field r0 r2 into r9;\n    async burn_public r8 r9 r1 r2 into r10;\n    output r10 as pondo_token.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as multi_token_support_program_v1.aleo/burn_public.future;\n    input r1 as multi_token_support_program_v1.aleo/transfer_public.future;\n    input r2 as u128.public;\n    input r3 as u128.public;\n    await r0;\n    await r1;\n    get multi_token_support_program_v1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842601field] into r4;\n    cast pondo_token.aleo 1751493913335802797273486270793650302076377624243810059080883537084141842600field into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    get multi_token_support_program_v1.aleo/authorized_balances[r6] into r7;\n    mul r4.supply 1_000_000u128 into r8;\n    div r8 r7.balance into r9;\n    mul r2 1_000_000u128 into r10;\n    div r10 r3 into r11;\n    gte r9 r11 into r12;\n    assert.eq r12 true;\n\n\n\n\nfunction initialize_token:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call multi_token_support_program_v1.aleo/register_token 1751493913335802797273486270793650302076377624243810059080883537084141842601field 97240284627655645872219502u128 1347306575u128 6u8 1_000_000_000_000_000u128 false pondo_token.aleo into r0;\n    call multi_token_support_program_v1.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842601field aleo1hmrpe0ts2khluprhex3y46cqqy44pme7lwc40ls9nexftx0xhu8sxxpnd0 1_000_000_000_000_000u128 4294967295u32 into r1;\n    async initialize_token r0 r1 into r2;\n    output r2 as pondo_token.aleo/initialize_token.future;\n\nfinalize initialize_token:\n    input r0 as multi_token_support_program_v1.aleo/register_token.future;\n    input r1 as multi_token_support_program_v1.aleo/mint_public.future;\n    await r0;\n    await r1;\n\n",
  "reference_delegator.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram reference_delegator.aleo;\n\n\n\nmapping initialized:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nfunction initialize:\n    assert.eq self.caller aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0;\n    call credits.aleo/transfer_public_as_signer reference_delegator.aleo 10_000_000_000u64 into r0;\n    call credits.aleo/bond_public aleo1j0zju7f0fpgv98gulyywtkxk6jca99l6425uqhnd5kccu4jc2grstjx0mt reference_delegator.aleo 10_000_000_000u64 into r1;\n    call pondo_oracle.aleo/propose_delegator aleo1j0zju7f0fpgv98gulyywtkxk6jca99l6425uqhnd5kccu4jc2grstjx0mt into r2;\n    async initialize r0 r1 r2 into r3;\n    output r3 as reference_delegator.aleo/initialize.future;\n\nfinalize initialize:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as credits.aleo/bond_public.future;\n    input r2 as pondo_oracle.aleo/propose_delegator.future;\n    await r0;\n    await r1;\n    await r2;\n    contains initialized[0u8] into r3;\n    assert.eq r3 false;\n    set 8u8 into initialized[0u8];\n\n\n\n\nfunction remove:\n    input r0 as u64.public;\n    assert.eq self.caller aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0;\n    call credits.aleo/unbond_public reference_delegator.aleo r0 into r1;\n    call pondo_oracle.aleo/remove_delegator into r2;\n    async remove r1 r2 into r3;\n    output r3 as reference_delegator.aleo/remove.future;\n\nfinalize remove:\n    input r0 as credits.aleo/unbond_public.future;\n    input r1 as pondo_oracle.aleo/remove_delegator.future;\n    await r0;\n    await r1;\n    contains credits.aleo/bonded[reference_delegator.aleo] into r2;\n    assert.eq r2 false;\n\n\n\n\nfunction withdraw:\n    input r0 as u64.private;\n    call credits.aleo/transfer_public aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0 r0 into r1;\n    async withdraw r1 into r2;\n    output r2 as reference_delegator.aleo/withdraw.future;\n\nfinalize withdraw:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get.or_use credits.aleo/account[reference_delegator.aleo] 0u64 into r1;\n    assert.eq r1 0u64;\n\n",
  "pondo_delegator1.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator1.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    lte r1 50u8 into r2;\n    assert.eq r2 true;\n    async set_validator r0 r1 into r3;\n    output r3 as pondo_delegator1.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator1.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator1.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator1.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator1.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator1.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator1.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator1.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator1.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator1.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator1.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator1.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator2.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator2.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator2.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator2.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator2.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    lte r1 50u8 into r2;\n    assert.eq r2 true;\n    async set_validator r0 r1 into r3;\n    output r3 as pondo_delegator2.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator2.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator2.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator2.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator2.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator2.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator2.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator2.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator2.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator2.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator2.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator2.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator3.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator3.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator3.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator3.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator3.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    lte r1 50u8 into r2;\n    assert.eq r2 true;\n    async set_validator r0 r1 into r3;\n    output r3 as pondo_delegator3.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator3.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator3.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator3.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator3.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator3.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator3.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator3.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator3.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator3.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator3.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator3.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator4.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator4.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator4.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator4.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator4.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    lte r1 50u8 into r2;\n    assert.eq r2 true;\n    async set_validator r0 r1 into r3;\n    output r3 as pondo_delegator4.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator4.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator4.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator4.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator4.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator4.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator4.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator4.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator4.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator4.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator4.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator4.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator5.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator5.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator5.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator5.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator5.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    lte r1 50u8 into r2;\n    assert.eq r2 true;\n    async set_validator r0 r1 into r3;\n    output r3 as pondo_delegator5.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator5.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator5.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator5.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator5.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator5.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator5.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator5.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator5.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator5.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator5.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator5.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n"
};